#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏.
"""

import asyncio
import logging
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from capsim.engine.simulation_engine import SimulationEngine
from capsim.common.logging_config import setup_logging
from capsim.common.db_config import ASYNC_DSN

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockRepository:
    async def create_simulation_run(self, *args, **kwargs):
        from uuid import uuid4
        from dataclasses import dataclass
        @dataclass
        class SimulationRun:
            run_id: str = str(uuid4())
        return SimulationRun()
    
    async def update_simulation_status(self, *args, **kwargs):
        pass
    
    async def get_simulations_by_status(self, *args, **kwargs):
        return []
    
    async def load_affinity_map(self, *args, **kwargs):
        return {}
    
    async def get_profession_attribute_ranges(self, *args, **kwargs):
        return {}
    
    async def get_persons_count(self, *args, **kwargs):
        return 0
    
    async def get_persons_for_simulation(self, *args, **kwargs):
        return []
    
    async def get_available_persons(self, *args, **kwargs):
        return []
    
    async def create_persons(self, *args, **kwargs):
        return []
    
    async def bulk_create_persons(self, *args, **kwargs):
        return []
    
    async def get_active_trends(self, *args, **kwargs):
        return []
    
    async def create_event(self, *args, **kwargs):
        pass
    
    async def bulk_update_persons(self, *args, **kwargs):
        pass
    
    async def bulk_update_simulation_participants(self, *args, **kwargs):
        pass
    
    async def create_person_attribute_history(self, *args, **kwargs):
        pass
    
    async def create_trend(self, *args, **kwargs):
        pass
    
    async def increment_trend_interactions(self, *args, **kwargs):
        pass
    
    async def clear_future_events(self, *args, **kwargs):
        pass
    
    async def close(self, *args, **kwargs):
        pass


async def test_time_advance():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    test_repo = MockRepository()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    engine = SimulationEngine(test_repo)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å 10 –∞–≥–µ–Ω—Ç–∞–º–∏
        await engine.initialize(num_agents=10)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ö–û–†–û–¢–ö–û–ô —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ 0.1 –¥–Ω—è (144 –º–∏–Ω—É—Ç—ã = 2.4 —á–∞—Å–∞)
        start_time = time.time()
        await engine.run_simulation(duration_days=0.1)
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        duration = end_time - start_time
        final_sim_time = engine.current_time
        
        logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        logger.info(f"   - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   - –°–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {final_sim_time:.2f} –º–∏–Ω—É—Ç")
        logger.info(f"   - –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {0.1 * 1440:.2f} –º–∏–Ω—É—Ç")
        logger.info(f"   - –í—Ä–µ–º—è –ø—Ä–æ–¥–≤–∏–Ω—É–ª–æ—Å—å: {'‚úÖ –î–ê' if final_sim_time > 10 else '‚ùå –ù–ï–¢'}")
        logger.info(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ —Å—Ä–æ–∫: {'‚úÖ –î–ê' if abs(final_sim_time - 144) < 10 else '‚ùå –ù–ï–¢'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if final_sim_time > 10:
            logger.info("‚úÖ –£–°–ü–ï–•: –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è!")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        return False
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        await engine.shutdown()


if __name__ == "__main__":
    success = asyncio.run(test_time_advance())
    sys.exit(0 if success else 1) 