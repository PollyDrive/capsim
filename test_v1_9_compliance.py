#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¢–ó v1.9.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π (cooldown, —ç—Ñ—Ñ–µ–∫—Ç—ã)
2. –°–∏—Å—Ç–µ–º—É sentiment –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
3. PostEffect —Å–∏—Å—Ç–µ–º—É
4. –°—É—Ç–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
5. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
"""

import asyncio
import json
import logging
from datetime import datetime
from uuid import uuid4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_v1_9_compliance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¢–ó v1.9."""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        from capsim.engine.simulation_engine import SimulationEngine
        from capsim.db.repositories import DatabaseRepository
        from capsim.common.settings import settings, action_config
        
        logger.info("=== –¢–ï–°–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¢–ó v1.9 ===")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–π—Å—Ç–≤–∏–π
        logger.info("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –∑–Ω–∞—á–µ–Ω–∏—è
        assert action_config.cooldowns["POST_MIN"] == 40, f"POST_MIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 40, –ø–æ–ª—É—á–µ–Ω {action_config.cooldowns['POST_MIN']}"
        assert action_config.cooldowns["SELF_DEV_MIN"] == 30, f"SELF_DEV_MIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 30, –ø–æ–ª—É—á–µ–Ω {action_config.cooldowns['SELF_DEV_MIN']}"
        logger.info("‚úÖ Cooldown –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó v1.9")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã POST
        post_effects = action_config.effects["POST"]
        assert post_effects["time_budget"] == -0.15, f"POST time_budget –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å -0.15, –ø–æ–ª—É—á–µ–Ω {post_effects['time_budget']}"
        assert post_effects["energy_level"] == -0.20, f"POST energy_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å -0.20, –ø–æ–ª—É—á–µ–Ω {post_effects['energy_level']}"
        assert post_effects["social_status"] == 0.05, f"POST social_status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.05, –ø–æ–ª—É—á–µ–Ω {post_effects['social_status']}"
        logger.info("‚úÖ POST —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó v1.9")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã SELF_DEV
        selfdev_effects = action_config.effects["SELF_DEV"]
        assert selfdev_effects["time_budget"] == -0.80, f"SELF_DEV time_budget –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å -0.80, –ø–æ–ª—É—á–µ–Ω {selfdev_effects['time_budget']}"
        assert selfdev_effects["energy_level"] == 0.45, f"SELF_DEV energy_level –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.45, –ø–æ–ª—É—á–µ–Ω {selfdev_effects['energy_level']}"
        assert selfdev_effects["social_status"] == 0.10, f"SELF_DEV social_status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.10, –ø–æ–ª—É—á–µ–Ω {selfdev_effects['social_status']}"
        logger.info("‚úÖ SELF_DEV —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó v1.9")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã PURCHASE
        for level in ["L1", "L2", "L3"]:
            purchase_effects = action_config.effects["PURCHASE"][level]
            assert "cost_range" in purchase_effects, f"PURCHASE {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å cost_range"
            assert "energy_level" in purchase_effects, f"PURCHASE {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å energy_level"
            assert "time_budget" in purchase_effects, f"PURCHASE {level} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å time_budget"
            logger.info(f"‚úÖ PURCHASE {level} —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó v1.9")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É sentiment
        logger.info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã sentiment...")
        from capsim.domain.trend import Trend, Sentiment
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ —Å sentiment
        test_trend = Trend.create_from_action(
            topic="Economic",
            originator_id=uuid4(),
            simulation_id=uuid4(),
            base_virality=2.0,
            sentiment="Positive"
        )
        assert test_trend.sentiment in ["Positive", "Negative"], f"Sentiment –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Positive –∏–ª–∏ Negative, –ø–æ–ª—É—á–µ–Ω {test_trend.sentiment}"
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ sentiment —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º PostEffect —Å–∏—Å—Ç–µ–º—É
        logger.info("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostEffect —Å–∏—Å—Ç–µ–º—ã...")
        from capsim.domain.events import TrendInfluenceEvent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—á–µ—Ç–∞ PostEffect
        assert hasattr(TrendInfluenceEvent, '_calculate_author_post_effect'), "TrendInfluenceEvent –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ _calculate_author_post_effect"
        logger.info("‚úÖ PostEffect —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—Ç–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
        logger.info("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—Ç–æ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤...")
        from capsim.domain.person import Person
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        test_agent = Person(
            profession="Developer",
            energy_level=3.0,
            time_budget=2.0,
            simulation_id=uuid4()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (00:00-08:00)
        night_time = 120.0  # 02:00
        day_time = night_time % 1440
        assert 0 <= day_time < 480, f"–í—Ä–µ–º—è {day_time} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–æ—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        
        can_act_night = test_agent.can_perform_action("any", current_time=night_time)
        assert not can_act_night, f"–ê–≥–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è {day_time}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
        day_time = 600.0  # 10:00
        can_act_day = test_agent.can_perform_action("any", current_time=day_time)
        assert can_act_day, f"–ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è"
        logger.info("‚úÖ –°—É—Ç–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        logger.info("5. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ë–î
        db_repo = DatabaseRepository()
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        engine = SimulationEngine(db_repo)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–∏–º—É–ª—è—Ü–∏—é
        await engine.initialize(num_agents=20, duration_days=0.05)  # 20 –∞–≥–µ–Ω—Ç–æ–≤, 1.2 —á–∞—Å–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await engine.run_simulation()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = engine.get_simulation_stats()
        
        logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò ===")
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total_events', 0)}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {stats.get('trends_created', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        events_by_type = {}
        for event in engine._aggregated_events:
            event_type = event.get('event_type', 'Unknown')
            events_by_type[event_type] = events_by_type.get(event_type, 0) + 1
        
        logger.info("=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô ===")
        for event_type, count in events_by_type.items():
            logger.info(f"{event_type}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        required_events = ['PublishPostAction', 'PurchaseAction', 'SelfDevAction']
        missing_events = []
        
        for event_type in required_events:
            if event_type not in events_by_type or events_by_type[event_type] == 0:
                missing_events.append(event_type)
        
        if missing_events:
            logger.error(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –°–û–ë–´–¢–ò–Ø: {missing_events}")
            return False
        else:
            logger.info("‚úÖ –í–°–ï –¢–ò–ü–´ –°–û–ë–´–¢–ò–ô –°–û–ó–î–ê–Æ–¢–°–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Å sentiment
        if stats.get('trends_created', 0) > 0:
            logger.info("‚úÖ –¢–†–ï–ù–î–´ –°–û–ó–î–ê–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û")
        else:
            logger.warning("‚ö†Ô∏è –¢–†–ï–ù–î–´ –ù–ï –°–û–ó–î–ê–Æ–¢–°–Ø")
        
        logger.info("=== –¢–ï–°–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¢–ó v1.9 –ó–ê–í–ï–†–®–ï–ù ===")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_v1_9_compliance())
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¢–ó v1.9!")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ï—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–ó v1.9!")
        exit(1) 