#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana
"""

import requests
import json
import time

def check_grafana_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Grafana"""
    try:
        response = requests.get("http://localhost:3000/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Grafana –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Grafana: {e}")
        return False

def check_prometheus_metrics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus"""
    try:
        response = requests.get("http://localhost:9091/api/v1/label/__name__/values", timeout=5)
        if response.status_code == 200:
            data = response.json()
            capsim_metrics = [m for m in data['data'] if m.startswith('capsim_')]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(capsim_metrics)} capsim –º–µ—Ç—Ä–∏–∫ –≤ Prometheus")
            for metric in capsim_metrics:
                print(f"   - {metric}")
            return len(capsim_metrics) > 0
        else:
            print(f"‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Prometheus: {e}")
        return False

def check_specific_metrics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    metrics_to_check = [
        "capsim_events_table_inserts_total",
        "capsim_http_requests_total", 
        "capsim_simulations_active",
        "capsim_events_insert_rate_per_minute"
    ]
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:")
    for metric in metrics_to_check:
        try:
            response = requests.get(f"http://localhost:9091/api/v1/query?query={metric}", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data['data']['result']:
                    value = data['data']['result'][0]['value'][1]
                    print(f"   ‚úÖ {metric}: {value}")
                else:
                    print(f"   ‚ö†Ô∏è  {metric}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                print(f"   ‚ùå {metric}: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as e:
            print(f"   ‚ùå {metric}: {e}")

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò DASHBOARDS")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
    if not check_grafana_status():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
    if not check_prometheus_metrics():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    check_specific_metrics()
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –î–∞—à–±–æ—Ä–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã:")
    print("   - CAPSIM Performance Tuning")
    print("   - CAPSIM Events Real Time")
    print("   - PostgreSQL Stats")
    print("   - Logs Dashboard")

if __name__ == "__main__":
    main() 