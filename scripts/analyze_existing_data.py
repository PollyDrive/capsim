#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç PublishPost –∏ –¥—Ä—É–≥—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
"""

import os
import sys
import json
import psycopg2
from datetime import datetime
from typing import Dict, List

def analyze_simulation_data():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ PostgreSQL –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    print("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –°–ò–ú–£–õ–Ø–¶–ò–ò CAPSIM")
    print("="*50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker
        conn = psycopg2.connect(
            host="localhost",
            database="capsim_db",
            user="capsim_rw",
            password="capsim321",
            port=5432
        )
        cur = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–ï–ù–¢–û–í")
        print("-" * 30)
        
        cur.execute("SELECT COUNT(*) FROM capsim.persons")
        total_agents = cur.fetchone()[0]
        print(f"–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_agents}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
        cur.execute("""
            SELECT profession, COUNT(*) as count
            FROM capsim.persons 
            GROUP BY profession 
            ORDER BY count DESC
        """)
        professions = cur.fetchall()
        
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º:")
        for prof, count in professions:
            percentage = (count / total_agents * 100) if total_agents > 0 else 0
            print(f"  {prof}: {count} ({percentage:.1f}%)")
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–π
        print("\nüéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ú–£–õ–Ø–¶–ò–ô")
        print("-" * 25)
        
        cur.execute("""
            SELECT run_id, start_time, status, num_agents, duration_days
            FROM capsim.simulation_runs 
            ORDER BY start_time DESC
            LIMIT 5
        """)
        simulations = cur.fetchall()
        
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏:")
        for sim_id, start_time, status, num_agents, duration in simulations:
            print(f"  {sim_id}: {status}, {num_agents} –∞–≥–µ–Ω—Ç–æ–≤, {duration} –¥–Ω–µ–π")
            print(f"    –ù–∞—á–∞–ª–æ: {start_time}")
        
        # 3. –ê–Ω–∞–ª–∏–∑ PublishPost —Å–æ–±—ã—Ç–∏–π
        print("\nüìù –ê–ù–ê–õ–ò–ó PUBLISHPOST –°–û–ë–´–¢–ò–ô")
        print("-" * 32)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PublishPost
        cur.execute("""
            SELECT 
                COUNT(DISTINCT e.agent_id) as agents_with_posts,
                COUNT(*) as total_posts,
                COUNT(DISTINCT e.simulation_id) as simulations_with_posts
            FROM capsim.events e
            WHERE e.event_type = 'PublishPostAction'
            AND e.agent_id IS NOT NULL
        """)
        post_stats = cur.fetchone()
        
        if post_stats and post_stats[0] > 0:
            agents_with_posts, total_posts, sims_with_posts = post_stats
            percentage_active = (agents_with_posts / total_agents * 100) if total_agents > 0 else 0
            
            print(f"–ê–≥–µ–Ω—Ç–æ–≤ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {agents_with_posts} –∏–∑ {total_agents}")
            print(f"üéØ –ü–†–û–¶–ï–ù–¢ –ê–ö–¢–ò–í–ù–´–• –ê–ì–ï–ù–¢–û–í: {percentage_active:.2f}%")
            print(f"–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {total_posts}")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {total_posts / agents_with_posts:.2f}")
            print(f"–°–∏–º—É–ª—è—Ü–∏–π —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {sims_with_posts}")
            
            # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            print("\nüèÜ –¢–û–ü-5 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –ê–ì–ï–ù–¢–û–í:")
            cur.execute("""
                SELECT 
                    p.first_name, p.last_name, p.profession,
                    COUNT(e.event_id) as post_count
                FROM capsim.persons p
                JOIN capsim.events e ON p.id = e.agent_id
                WHERE e.event_type = 'PublishPostAction'
                GROUP BY p.id, p.first_name, p.last_name, p.profession
                ORDER BY post_count DESC
                LIMIT 5
            """)
            top_agents = cur.fetchall()
            
            for i, (first_name, last_name, profession, count) in enumerate(top_agents, 1):
                print(f"  {i}. {first_name} {last_name} ({profession}) - {count} –ø–æ—Å—Ç–æ–≤")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
            print("\nüëî –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ü–†–û–§–ï–°–°–ò–Ø–ú:")
            cur.execute("""
                SELECT 
                    p.profession,
                    COUNT(DISTINCT p.id) as total_agents_prof,
                    COUNT(DISTINCT CASE WHEN e.event_type = 'PublishPostAction' THEN e.agent_id END) as active_agents_prof,
                    COUNT(CASE WHEN e.event_type = 'PublishPostAction' THEN e.event_id END) as total_posts_prof
                FROM capsim.persons p
                LEFT JOIN capsim.events e ON p.id = e.agent_id
                GROUP BY p.profession
                ORDER BY active_agents_prof DESC
            """)
            prof_stats = cur.fetchall()
            
            for profession, total_prof, active_prof, posts_prof in prof_stats:
                prof_percentage = (active_prof / total_prof * 100) if total_prof > 0 else 0
                avg_posts = (posts_prof / active_prof) if active_prof > 0 else 0
                print(f"  {profession}: {active_prof}/{total_prof} ({prof_percentage:.1f}%) - {posts_prof} –ø–æ—Å—Ç–æ–≤ (—Å—Ä. {avg_posts:.1f})")
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º –ø–æ—Å—Ç–æ–≤
            print("\nüéØ –ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ú–´ –ü–û–°–¢–û–í:")
            cur.execute("""
                SELECT 
                    event_data->>'topic' as topic,
                    COUNT(*) as count
                FROM capsim.events 
                WHERE event_type = 'PublishPostAction'
                AND event_data->>'topic' IS NOT NULL
                GROUP BY event_data->>'topic'
                ORDER BY count DESC
                LIMIT 10
            """)
            topics = cur.fetchall()
            
            total_topic_posts = sum(count for _, count in topics)
            for topic, count in topics:
                percentage = (count / total_topic_posts * 100) if total_topic_posts > 0 else 0
                print(f"  {topic}: {count} –ø–æ—Å—Ç–æ–≤ ({percentage:.1f}%)")
        
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ PublishPost —Å–æ–±—ã—Ç–∏—è—Ö –≤ –±–∞–∑–µ")
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ï–ù–î–û–í")
        print("-" * 20)
        
        cur.execute("SELECT COUNT(*) FROM capsim.trends")
        total_trends = cur.fetchone()[0]
        print(f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {total_trends}")
        
        if total_trends > 0:
            # –¢–æ–ø —Ç–µ–º—ã —Ç—Ä–µ–Ω–¥–æ–≤
            cur.execute("""
                SELECT topic, COUNT(*) as count, AVG(base_virality_score) as avg_virality
                FROM capsim.trends 
                GROUP BY topic 
                ORDER BY count DESC
                LIMIT 5
            """)
            trend_topics = cur.fetchall()
            
            print("\n–¢–æ–ø —Ç–µ–º—ã —Ç—Ä–µ–Ω–¥–æ–≤:")
            for topic, count, avg_virality in trend_topics:
                print(f"  {topic}: {count} —Ç—Ä–µ–Ω–¥–æ–≤ (—Å—Ä–µ–¥–Ω—è—è –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {avg_virality:.2f})")
        
        # 5. –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n‚è∞ –í–†–ï–ú–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("-" * 21)
        
        cur.execute("""
            SELECT 
                DATE(processed_at) as date,
                COUNT(*) as events_count
            FROM capsim.events 
            WHERE event_type = 'PublishPostAction'
            GROUP BY DATE(processed_at)
            ORDER BY date DESC
            LIMIT 7
        """)
        daily_stats = cur.fetchall()
        
        if daily_stats:
            print("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º:")
            for date, count in daily_stats:
                print(f"  {date}: {count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        print("\n" + "="*50)
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        results = {
            "timestamp": datetime.now().isoformat(),
            "total_agents": total_agents,
            "agents_with_posts": agents_with_posts if 'agents_with_posts' in locals() else 0,
            "percentage_active": percentage_active if 'percentage_active' in locals() else 0,
            "total_posts": total_posts if 'total_posts' in locals() else 0,
            "total_trends": total_trends,
            "professions": [{"profession": p, "count": c} for p, c in professions],
            "top_agents": [{"name": f"{fn} {ln}", "profession": p, "posts": c} for fn, ln, p, c in (top_agents if 'top_agents' in locals() else [])]
        }
        
        results_file = f"simulation_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        analyze_simulation_data()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 