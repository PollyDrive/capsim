#!/usr/bin/env python3
"""
Production Interactive Simulation - Core Engine Dev
–†–µ–∞–ª—å–Ω–∞—è —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞ production –ë–î
"""

import asyncio
import json
import time
import uuid
from datetime import datetime
from pathlib import Path
import sys
from typing import Dict, List, Any

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from capsim.engine.simulation_engine import SimulationEngine
from capsim.db.repositories import DatabaseRepository
from capsim.common.settings import settings


class InteractionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    
    def __init__(self):
        self.start_time = time.time()
        self.checkpoints = []
    
    def add_checkpoint(self, sim_time: float, stats: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
        real_time = time.time() - self.start_time
        checkpoint = {
            'sim_time': sim_time,
            'real_time': real_time,
            'timestamp': datetime.now().strftime("%H:%M:%S"),
            **stats
        }
        self.checkpoints.append(checkpoint)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        print(f"‚è∞ {checkpoint['timestamp']} | "
              f"Sim: {sim_time:.1f}m | "
              f"Trends: {stats.get('trends', 0)} | "
              f"Events: {stats.get('events', 0)} | "
              f"Actions: {stats.get('actions', 0)}")
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        if not self.checkpoints:
            return
            
        last = self.checkpoints[-1]
        total_time = last['real_time']
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô:")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {last['sim_time']:.1f} –º–∏–Ω—É—Ç")
        print(f"   üïê –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   üöÑ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {(last['sim_time'] * 60) / total_time:.1f}x")
        print(f"   üìà –¢—Ä–µ–Ω–¥–æ–≤: {last.get('trends', 0)}")
        print(f"   üé¨ –°–æ–±—ã—Ç–∏–π: {last.get('events', 0)}")
        print(f"   üéØ –î–µ–π—Å—Ç–≤–∏–π: {last.get('actions', 0)}")


async def run_production_interaction_simulation():
    """–ó–∞–ø—É—Å–∫ production —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."""
    
    print('üè≠ PRODUCTION INTERACTIVE SIMULATION')
    print('='*60)
    print('Core Engine Dev: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î')
    print()
    print('üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:')
    print('   üë• –ê–≥–µ–Ω—Ç–æ–≤: 100')
    print('   üöÑ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: 5x') 
    print('   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 15 —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç')
    print('   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Production (—Ä–µ–∞–ª—å–Ω–∞—è)')
    print()
    
    # Initialize production components
    try:
        database_url = settings.DATABASE_URL
        db_repo = DatabaseRepository(database_url)
        print(f'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {database_url[:50]}...')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}')
        return
    
    # Initialize engine
    engine = SimulationEngine(db_repo)
    monitor = InteractionMonitor()
    
    try:
        # Initialize with 100 agents
        print(f'\nüèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏...')
        await engine.initialize(num_agents=100)
        
        simulation_id = engine.simulation_id
        print(f'‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {simulation_id}')
        print(f'üìä –ê–≥–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(engine.agents)}')
        print(f'üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {len(engine.active_trends)}')
        
        # Start simulation
        print(f'\nüöÄ –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò')
        print('-' * 40)
        
        # Run simulation for 2 hours (120 minutes)
        simulation_task = asyncio.create_task(
            engine.run_simulation(duration_days=120/1440)
        )
        
        # Monitoring loop
        monitoring_interval = 15.0  # –∫–∞–∂–¥—ã–µ 15 —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
        next_checkpoint = monitoring_interval
        
        while not simulation_task.done() and engine.current_time < 120.0:
            await asyncio.sleep(10)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ–∫—É–Ω–¥
            
            # Checkpoint –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if engine.current_time >= next_checkpoint:
                stats = await collect_interaction_stats(engine, db_repo)
                monitor.add_checkpoint(engine.current_time, stats)
                next_checkpoint += monitoring_interval
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                if stats.get('trends', 0) >= 10 and stats.get('actions', 0) >= 50:
                    print(f"\n‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π!")
                    print(f"   üìà –¢—Ä–µ–Ω–¥–æ–≤: {stats['trends']}")
                    print(f"   üéØ –î–µ–π—Å—Ç–≤–∏–π: {stats['actions']}")
                    break
        
        # Graceful shutdown
        if not simulation_task.done():
            print(f"\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...")
            await engine.stop_simulation("manual_stop")
        
        await simulation_task
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await engine.stop_simulation("interrupted")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        await engine.stop_simulation("error")
    finally:
        # Final stats
        try:
            final_stats = await collect_interaction_stats(engine, db_repo)
            monitor.add_checkpoint(engine.current_time, final_stats)
            monitor.show_summary()
            
            # Detailed analysis
            await analyze_interaction_patterns(engine, db_repo, simulation_id)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        # Cleanup
        await engine.shutdown()
        await db_repo.close()


async def collect_interaction_stats(engine: SimulationEngine, db_repo: DatabaseRepository) -> Dict[str, Any]:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –ë–î."""
    
    try:
        # Get stats from database
        simulation_stats = await db_repo.get_simulation_stats(engine.simulation_id)
        
        # Count active agents
        active_agents = sum(1 for agent in engine.agents if agent.energy_level > 1.0)
        
        stats = {
            'trends': simulation_stats.get('trends_count', 0),
            'events': simulation_stats.get('events_count', 0),
            'actions': simulation_stats.get('actions_count', 0),
            'active_agents': active_agents,
            'events_in_queue': len(engine.event_queue),
            'active_trends': len(engine.active_trends)
        }
        
        return stats
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'trends': len(engine.active_trends),
            'events': len(engine.event_queue), 
            'actions': 0,
            'active_agents': sum(1 for agent in engine.agents if agent.energy_level > 1.0),
            'events_in_queue': len(engine.event_queue),
            'active_trends': len(engine.active_trends)
        }


async def analyze_interaction_patterns(engine: SimulationEngine, db_repo: DatabaseRepository, 
                                     simulation_id: uuid.UUID):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô")
    print('='*50)
    
    try:
        # Get recent trends from database
        query = """
        SELECT topic, COUNT(*) as trend_count, 
               AVG(base_virality_score) as avg_virality,
               SUM(total_interactions) as total_interactions
        FROM capsim.trends 
        WHERE simulation_id = %s 
        GROUP BY topic 
        ORDER BY trend_count DESC
        """
        
        trend_results = await db_repo.execute_query(query, [str(simulation_id)])
        
        if trend_results:
            print(f"üìà –¢–†–ï–ù–î–´ –ü–û –¢–ï–ú–ê–ú:")
            for row in trend_results[:5]:  # –¢–æ–ø 5 —Ç–µ–º
                print(f"   {row['topic']}: {row['trend_count']} —Ç—Ä–µ–Ω–¥–æ–≤, "
                      f"–≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å {row['avg_virality']:.1f}, "
                      f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π {row['total_interactions']}")
        
        # Analyze agent activity
        active_agents = [a for a in engine.agents if a.energy_level > 1.0]
        if active_agents:
            avg_energy = sum(a.energy_level for a in active_agents) / len(active_agents)
            avg_social = sum(a.social_status for a in active_agents) / len(active_agents)
            
            print(f"\nüë• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ê–ì–ï–ù–¢–û–í:")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_agents)}/{len(engine.agents)} "
                  f"({len(active_agents)/len(engine.agents)*100:.1f}%)")
            print(f"   –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è: {avg_energy:.1f}/5.0")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Å–æ—Ü. —Å—Ç–∞—Ç—É—Å: {avg_social:.1f}/5.0")
        
        # Event queue analysis
        if engine.event_queue:
            event_types = {}
            for event_wrapper in engine.event_queue:
                event_type = type(event_wrapper.event).__name__
                event_types[event_type] = event_types.get(event_type, 0) + 1
            
            print(f"\nüé¨ –û–ß–ï–†–ï–î–¨ –°–û–ë–´–¢–ò–ô:")
            print(f"   –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(engine.event_queue)}")
            for event_type, count in sorted(event_types.items(), key=lambda x: x[1], reverse=True):
                print(f"   {event_type}: {count}")
        
        # Success indicators
        trends_count = len(engine.active_trends)
        events_count = len(engine.event_queue)
        
        print(f"\nüéØ –ò–ù–î–ò–ö–ê–¢–û–†–´ –£–°–ü–ï–•–ê:")
        
        if trends_count > 0:
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: {trends_count}")
        else:
            print(f"   ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
            
        if events_count > 0:
            print(f"   ‚úÖ –°–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {events_count}")
        else:
            print(f"   ‚ùå –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç–∞")
            
        if len(active_agents) > len(engine.agents) * 0.3:
            print(f"   ‚úÖ –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(active_agents)}")
        else:
            print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(active_agents)}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


if __name__ == "__main__":
    print("üöÄ Starting Production Interactive Simulation...")
    print("Core Engine Dev: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
    print()
    
    try:
        asyncio.run(run_production_interaction_simulation())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\nüèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 