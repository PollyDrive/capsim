#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –≤ Grafana –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ Prometheus
"""

import asyncio
import psycopg2
import json
import requests
import time
from datetime import datetime, timedelta

DATABASE_URL = "postgresql://postgres:capsim321@postgres:5432/capsim_db"
API_BASE = "http://localhost:8000"
GRAFANA_BASE = "http://localhost:3000"
PROMETHEUS_BASE = "http://localhost:9091"

class EventsVerificationTest:
    def __init__(self):
        self.results = {}
        
    def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn = psycopg2.connect(
                host="postgres",
                database="capsim_db",
                user="postgres", 
                password="capsim321",
                port=5432
            )
            return conn
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
            
    def check_initial_state(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...")
        
        conn = self.connect_db()
        if not conn:
            return False
            
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π
        cur.execute("SELECT COUNT(*) FROM capsim.events")
        events_count = cur.fetchone()[0]
        print(f"üìä –°–æ–±—ã—Ç–∏—è –≤ –ë–î: {events_count}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π
        cur.execute("""
            SELECT run_id, status, start_time, num_agents 
            FROM capsim.simulation_runs 
            WHERE end_time IS NULL
        """)
        active_sims = cur.fetchall()
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {len(active_sims)}")
        
        for sim in active_sims:
            print(f"  - {sim[0]} | {sim[1]} | {sim[2]} | {sim[3]} –∞–≥–µ–Ω—Ç–æ–≤")
            
        cur.close()
        conn.close()
        
        self.results['initial_events'] = events_count
        self.results['initial_active_sims'] = len(active_sims)
        return True
        
    def check_api_metrics(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–µ—Ç—Ä–∏–∫"""
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–µ—Ç—Ä–∏–∫...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            response = requests.get(f"{API_BASE}/update-metrics")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data}")
                self.results['metrics_update'] = data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {response.status_code}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º /stats/events
            response = requests.get(f"{API_BASE}/stats/events")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π: {data['events_table']}")
                self.results['events_stats'] = data
                
                if data['events_table']['data_source'] == 'REAL_DATABASE':
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
                else:
                    print("‚ùå –í—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫-–¥–∞–Ω–Ω—ã–µ!")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return False
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return False
            
    def check_prometheus_metrics(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus"""
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = [
                "capsim_events_table_rows_total",
                "capsim_events_insert_rate_per_minute", 
                "capsim_simulations_active"
            ]
            
            for metric in metrics:
                url = f"{PROMETHEUS_BASE}/api/v1/query?query={metric}"
                response = requests.get(url)
                
                if response.status_code == 200:
                    data = response.json()
                    if data['data']['result']:
                        value = data['data']['result'][0]['value'][1]
                        print(f"‚úÖ {metric}: {value}")
                        self.results[f'prometheus_{metric}'] = float(value)
                    else:
                        print(f"‚ö†Ô∏è  {metric}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        self.results[f'prometheus_{metric}'] = 0
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {metric}: {response.status_code}")
                    
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Prometheus: {e}")
            return False
            
    def run_test_simulation(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π...")
        import subprocess
        result = subprocess.run([
            "python", "-m", "capsim", "stop", "--force"
        ], capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–π: {result.stderr}")
            
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ (5 –∞–≥–µ–Ω—Ç–æ–≤, 2 –º–∏–Ω—É—Ç—ã)...")
        
        result = subprocess.run([
            "python", "-m", "capsim", "run", 
            "--agents", "5", 
            "--minutes", "2",
            "--speed", "10.0"
        ], capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
            conn = self.connect_db()
            if conn:
                cur = conn.cursor()
                cur.execute("SELECT COUNT(*) FROM capsim.events")
                new_events_count = cur.fetchone()[0]
                print(f"üìä –°–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {new_events_count}")
                
                events_created = new_events_count - self.results.get('initial_events', 0)
                print(f"‚ú® –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {events_created}")
                
                if events_created > 0:
                    print("‚úÖ –°–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –ë–î!")
                    self.results['events_created'] = events_created
                    self.results['final_events'] = new_events_count
                else:
                    print("‚ùå –°–æ–±—ã—Ç–∏—è –ù–ï —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –ë–î!")
                    return False
                    
                cur.close()
                conn.close()
                
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {result.stderr}")
            print(f"Stdout: {result.stdout}")
            return False
            
    def check_final_state(self):
        """–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print("\nüèÅ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.check_api_metrics()
        self.check_prometheus_metrics()
        
        initial_events = self.results.get('initial_events', 0)
        final_events = self.results.get('final_events', 0)
        events_created = final_events - initial_events
        
        print("\nüìã –†–ï–ó–Æ–ú–ï:")
        print(f"  üìä –°–æ–±—ã—Ç–∏—è –≤ –ë–î: {initial_events} ‚Üí {final_events} (+{events_created})")
        print(f"  üéØ Prometheus —Å–æ–±—ã—Ç–∏—è: {self.results.get('prometheus_capsim_events_table_rows_total', 0)}")
        print(f"  üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {self.results.get('prometheus_capsim_simulations_active', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        prometheus_events = self.results.get('prometheus_capsim_events_table_rows_total', 0)
        if abs(prometheus_events - final_events) <= 1:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
            print("‚úÖ Prometheus –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –ë–î")
            return True
        else:
            print(f"‚ùå Prometheus –º–µ—Ç—Ä–∏–∫–∏ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ë–î: {prometheus_events} vs {final_events}")
            return False
            
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ CAPSIM Events & Grafana Verification Test")
        print("=" * 50)
        
        tests = [
            ("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", self.check_initial_state),
            ("API –º–µ—Ç—Ä–∏–∫–∏", self.check_api_metrics), 
            ("Prometheus –º–µ—Ç—Ä–∏–∫–∏", self.check_prometheus_metrics),
            ("–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è", self.run_test_simulation),
            ("–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", self.check_final_state)
        ]
        
        passed = 0
        for test_name, test_func in tests:
            print(f"\nüß™ {test_name}...")
            try:
                if test_func():
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
                
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == len(tests):
            print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("üéØ Grafana —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
            print("üìä –°–æ–±—ã—Ç–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ capsim.events")
            return True
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –µ—â–µ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return False

if __name__ == "__main__":
    test = EventsVerificationTest()
    success = test.run_all_tests()
    
    if success:
        print("\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò GRAFANA:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ CAPSIM 2.0 - Events & Simulations Dashboard")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç '(REAL DATA)'")
        print("4. –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î, –∞ –Ω–µ –±—ã—Ç—å 7.31k")
        
    exit(0 if success else 1) 