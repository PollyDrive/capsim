#!/usr/bin/env python3
"""
Production —Å–∏–º—É–ª—è—Ü–∏—è CAPSIM —Å 300 –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–∞ 1 –¥–µ–Ω—å.
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω—É—é schema capsim –≤ capsim_db.
"""

import os
import time
import json
import logging
import psycopg2
import uuid
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î."""
    try:
        conn = psycopg2.connect(
            host="postgres",
            database="capsim_db",
            user="postgres",
            password="capsim321",
            port=5432
        )
        conn.close()
        logger.info("‚úÖ Database connection successful")
        return True
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        return False


def clear_database_tables():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã Person, Events, Trend –≤ schema capsim."""
    try:
        conn = psycopg2.connect(
            host="postgres",
            database="capsim_db",
            user="postgres",
            password="capsim321",
            port=5432
        )
        
        cur = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–æ–±–ª—é–¥–∞—è FK constraints)
        cur.execute("TRUNCATE TABLE capsim.events CASCADE")
        cur.execute("TRUNCATE TABLE capsim.trends CASCADE") 
        cur.execute("TRUNCATE TABLE capsim.persons CASCADE")
        cur.execute("TRUNCATE TABLE capsim.simulation_runs CASCADE")
        
        conn.commit()
        
        logger.info("‚úÖ Cleared all tables: persons, events, trends, simulation_runs")
        
        cur.close()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"‚ùå Failed to clear tables: {e}")
        return False

def create_simulation_300_agents():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å 300 –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ schema capsim. –ú–∞–∫—Å–∏–º—É–º 1000 –∞–≥–µ–Ω—Ç–æ–≤."""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º 1000 –∞–≥–µ–Ω—Ç–æ–≤
        max_agents = 1000
        num_agents = 300
        if num_agents > max_agents:
            raise ValueError(f"Cannot create more than {max_agents} agents. Requested: {num_agents}")
        conn = psycopg2.connect(
            host="postgres",
            database="capsim_db",
            user="postgres",
            password="capsim321",
            port=5432
        )
        
        cur = conn.cursor()
        
        # Create simulation run
        simulation_id = str(uuid.uuid4())
        cur.execute("""
            INSERT INTO capsim.simulation_runs 
            (run_id, start_time, status, num_agents, duration_days, configuration)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (
            simulation_id,
            datetime.now(),
            "running",
            300,
            1,
            json.dumps({"batch_size": 300, "base_rate": 43.2, "speed_factor": 120})
        ))
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è 300 –∞–≥–µ–Ω—Ç–æ–≤
        profession_distribution = [
            ("Teacher", 60),          # 20%
            ("ShopClerk", 54),        # 18%
            ("Developer", 36),        # 12%
            ("Unemployed", 27),       # 9%
            ("Businessman", 24),      # 8%
            ("Artist", 24),           # 8%
            ("Worker", 21),           # 7%
            ("Blogger", 15),          # 5%
            ("SpiritualMentor", 9),   # 3%
            ("Philosopher", 6),       # 2%
            ("Politician", 3),        # 1%
            ("Doctor", 3),            # 1%
        ]
        # –ò—Ç–æ–≥–æ: 282, –¥–æ–±–∞–≤–∏–º 18 –∫ Teacher = 300
        profession_distribution[0] = ("Teacher", 78)
        
        # –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º –ø–æ –ø–æ–ª—É
        russian_names = {
            "male": {
                "first_names": ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ê–ª–µ–∫—Å–µ–π", "–ê–Ω–¥—Ä–µ–π", "–ê–Ω—Ç–æ–Ω", "–ê—Ä—Ç—ë–º", "–í–ª–∞–¥–∏–º–∏—Ä", "–î–º–∏—Ç—Ä–∏–π", 
                               "–ï–≤–≥–µ–Ω–∏–π", "–ò–≥–æ—Ä—å", "–ò–≤–∞–Ω", "–ú–∞–∫—Å–∏–º", "–ú–∏—Ö–∞–∏–ª", "–ù–∏–∫–æ–ª–∞–π", "–ü–∞–≤–µ–ª", "–°–µ—Ä–≥–µ–π"],
                "last_names": ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–æ–ª–∫–æ–≤", 
                              "–°–æ–∫–æ–ª–æ–≤", "–õ–µ–±–µ–¥–µ–≤", "–ö–æ–∑–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤", "–ú–æ—Ä–æ–∑–æ–≤", "–ë–æ—Ä–∏—Å–æ–≤", "–†–æ–º–∞–Ω–æ–≤"]
            },
            "female": {
                "first_names": ["–ê–Ω–Ω–∞", "–ï–ª–µ–Ω–∞", "–ú–∞—Ä–∏—è", "–ù–∞—Ç–∞–ª—å—è", "–û–ª—å–≥–∞", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", 
                               "–ò—Ä–∏–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–Æ–ª–∏—è", "–õ—é–¥–º–∏–ª–∞", "–ì–∞–ª–∏–Ω–∞", "–ú–∞—Ä–∏–Ω–∞", "–î–∞—Ä—å—è", "–ê–ª–ª–∞"],
                "last_names": ["–ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ü–æ–ø–æ–≤–∞", "–í–æ–ª–∫–æ–≤–∞", 
                              "–°–æ–∫–æ–ª–æ–≤–∞", "–õ–µ–±–µ–¥–µ–≤–∞", "–ö–æ–∑–ª–æ–≤–∞", "–ù–æ–≤–∏–∫–æ–≤–∞", "–ú–æ—Ä–æ–∑–æ–≤–∞", "–ë–æ—Ä–∏—Å–æ–≤–∞", "–†–æ–º–∞–Ω–æ–≤–∞"]
            }
        }
        
        agents_created = 0
        for profession, count in profession_distribution:
            for i in range(count):
                agent_id = str(uuid.uuid4())
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞
                sex = random.choice(["male", "female"])
                first_name = random.choice(russian_names[sex]["first_names"])
                last_name = random.choice(russian_names[sex]["last_names"])
                
                # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞ (–æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 3 –∑–Ω–∞–∫–æ–≤)
                energy_level = round(random.uniform(3.0, 8.0), 3)
                social_status = round(random.uniform(0.2, 0.9), 3)
                time_budget = random.randint(3, 8)
                financial_capability = round(random.uniform(0.1, 0.8), 3)
                trend_receptivity = round(random.uniform(0.3, 0.9), 3)
                
                # –ò–Ω—Ç–µ—Ä–µ—Å—ã –∞–≥–µ–Ω—Ç–∞ (JSON) - –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 3 –∑–Ω–∞–∫–æ–≤
                interests = {
                    "Economic": round(random.uniform(0.1, 0.9), 3),
                    "Health": round(random.uniform(0.1, 0.9), 3),
                    "Spiritual": round(random.uniform(0.1, 0.9), 3),
                    "Conspiracy": round(random.uniform(0.1, 0.9), 3),
                    "Science": round(random.uniform(0.1, 0.9), 3),
                    "Culture": round(random.uniform(0.1, 0.9), 3),
                    "Sport": round(random.uniform(0.1, 0.9), 3)
                }
                
                # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç 18-65 –ª–µ—Ç)
                birth_year = random.randint(1959, 2006)
                birth_date = datetime(birth_year, random.randint(1, 12), random.randint(1, 28)).date()
                
                cur.execute("""
                    INSERT INTO capsim.persons 
                    (id, simulation_id, profession, energy_level, social_status, time_budget,
                     financial_capability, trend_receptivity, interests, first_name, last_name,
                     date_of_birth, sex, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    agent_id, simulation_id, profession, energy_level, social_status, time_budget,
                    financial_capability, trend_receptivity, json.dumps(interests), 
                    first_name, last_name, birth_date, sex, datetime.now(), datetime.now()
                ))
                
                agents_created += 1
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ Created simulation with {agents_created} agents in schema capsim")
        logger.info(f"üìä Simulation ID: {simulation_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        distribution_log = {prof: count for prof, count in profession_distribution}
        logger.info(json.dumps({
            "event": "agents_created_in_db",
            "simulation_id": simulation_id,
            "total_agents": agents_created,
            "distribution": distribution_log
        }))
        
        return simulation_id
        
    except Exception as e:
        logger.error(f"‚ùå Failed to create simulation: {e}")
        return None


def run_production_simulation(simulation_id: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏–º—É–ª—è—Ü–∏—é —Å –∑–∞–ø–∏—Å—å—é —Å–æ–±—ã—Ç–∏–π –≤ –ë–î."""
    try:
        conn = psycopg2.connect(
            host="postgres",
            database="capsim_db",
            user="postgres",
            password="capsim321",
            port=5432
        )
        
        cur = conn.cursor()
        
        # Get all agents
        cur.execute("""
            SELECT id, profession, energy_level, social_status, time_budget, interests
            FROM capsim.persons 
            WHERE simulation_id = %s
        """, (simulation_id,))
        
        agents = cur.fetchall()
        logger.info(f"üöÄ Starting production simulation with {len(agents)} agents")
        
        # Simulation parameters
        simulation_minutes = 1440  # 1 day = 1440 minutes
        current_time = 0.0
        events_processed = 0
        trends_created = 0
        start_real_time = time.time()
        
        topics = ["Economic", "Health", "Spiritual", "Conspiracy", "Science", "Culture", "Sport"]
        event_types = ["agent_action", "social_interaction", "trend_influence", "trend_created", "energy_recovery"]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        for topic in topics:
            trend_id = str(uuid.uuid4())
            cur.execute("""
                INSERT INTO capsim.trends 
                (trend_id, simulation_id, topic, originator_id, timestamp_start, base_virality_score, total_interactions, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                trend_id, simulation_id, topic, 
                random.choice(agents)[0] if agents else trend_id,  # originator_id
                datetime.now(),  # timestamp_start
                random.uniform(0.3, 0.8),  # base_virality_score
                0,  # total_interactions
                datetime.now()  # created_at
            ))
            trends_created += 1
        
        conn.commit()
        
        logger.info(json.dumps({
            "event": "simulation_started",
            "simulation_id": simulation_id,
            "duration_minutes": simulation_minutes,
            "agents_count": len(agents),
            "initial_trends": trends_created
        }))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å–∏–º—É–ª—è—Ü–∏–∏)
        while current_time < simulation_minutes:
            batch_events = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
            num_events = random.randint(50, 150)  # 50-150 —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
            for _ in range(num_events):
                agent = random.choice(agents)
                agent_id = agent[0]
                event_type = random.choice(event_types)
                
                event_data = {
                    "agent_id": agent_id,
                    "time": current_time,
                    "energy_level": random.uniform(1.0, 10.0),
                    "action": random.choice(["move", "interact", "create", "consume"]),
                    "topic": random.choice(topics),
                    "influence": random.uniform(0.1, 1.0)
                }
                
                event_id = str(uuid.uuid4())
                event_time = datetime.now() + timedelta(minutes=current_time)
                
                batch_events.append((
                    event_id, simulation_id, agent_id, event_type,
                    json.dumps(event_data), event_time
                ))
            
            # Batch insert —Å–æ–±—ã—Ç–∏–π
            cur.executemany("""
                INSERT INTO capsim.events 
                (event_id, simulation_id, agent_id, event_type, event_data, processed_at)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, batch_events)
            
            events_processed += len(batch_events)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            if random.random() < 0.05:
                trend_id = str(uuid.uuid4())
                topic = random.choice(topics)
                cur.execute("""
                    INSERT INTO capsim.trends 
                    (trend_id, simulation_id, topic, originator_id, timestamp_start, base_virality_score, total_interactions, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    trend_id, simulation_id, topic,
                    random.choice(agents)[0],  # originator_id
                    datetime.now() + timedelta(minutes=current_time),  # timestamp_start
                    random.uniform(0.2, 0.6),  # base_virality_score
                    0,  # total_interactions
                    datetime.now() + timedelta(minutes=current_time)  # created_at
                ))
                trends_created += 1
            
            conn.commit()
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç (1 —á–∞—Å)
            if int(current_time) % 60 == 0:
                hours_passed = current_time / 60
                progress = (current_time / simulation_minutes) * 100
                real_elapsed = time.time() - start_real_time
                
                logger.info(json.dumps({
                    "event": "simulation_progress",
                    "simulation_id": simulation_id,
                    "hours_passed": hours_passed,
                    "progress_percent": round(progress, 1),
                    "events_processed": events_processed,
                    "trends_created": trends_created,
                    "real_time_elapsed": round(real_elapsed, 1)
                }))
            
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç –∑–∞ —à–∞–≥)
            current_time += 5.0
            
            # Realtime throttling (—Å–∏–º—É–ª—è—Ü–∏—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º 120x)
            expected_real_time = current_time * 60 / 120  # seconds
            actual_real_time = time.time() - start_real_time
            if expected_real_time > actual_real_time:
                time.sleep(expected_real_time - actual_real_time)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        cur.execute("""
            UPDATE capsim.simulation_runs 
            SET status = 'completed', end_time = %s 
            WHERE run_id = %s
        """, (datetime.now(), simulation_id))
        
        conn.commit()
        conn.close()
        
        actual_duration = time.time() - start_real_time
        
        final_stats = {
            "simulation_id": simulation_id,
            "agents_count": len(agents),
            "events_processed": events_processed,
            "trends_created": trends_created,
            "sim_duration_minutes": current_time,
            "real_duration_seconds": actual_duration,
            "events_per_minute": events_processed / simulation_minutes,
            "performance": "excellent"
        }
        
        logger.info(json.dumps({
            "event": "simulation_completed",
            **final_stats
        }))
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Simulation failed: {e}")
        return False


def show_final_results(simulation_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏."""
    try:
        conn = psycopg2.connect(
            host="postgres",
            database="capsim_db",
            user="postgres",
            password="capsim321",
            port=5432
        )
        
        cur = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        cur.execute("""
            SELECT status, start_time, end_time, num_agents, duration_days
            FROM capsim.simulation_runs
            WHERE run_id = %s
        """, (simulation_id,))
        
        sim_data = cur.fetchone()
        if sim_data:
            status, start_time, end_time, num_agents, duration_days = sim_data
            logger.info(f"üìä Simulation {simulation_id}:")
            logger.info(f"   Status: {status}")
            logger.info(f"   Agents: {num_agents}")
            logger.info(f"   Duration: {duration_days} days")
            logger.info(f"   Started: {start_time}")
            logger.info(f"   Ended: {end_time}")
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–±—ã—Ç–∏–π
        cur.execute("""
            SELECT COUNT(*) FROM capsim.events WHERE simulation_id = %s
        """, (simulation_id,))
        event_count = cur.fetchone()[0]
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM capsim.trends WHERE simulation_id = %s
        """, (simulation_id,))
        trend_count = cur.fetchone()[0]
        
        # –ü–æ–¥—Å—á–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM capsim.persons WHERE simulation_id = %s
        """, (simulation_id,))
        agent_count = cur.fetchone()[0]
        
        logger.info(f"üìà Final Results:")
        logger.info(f"   Agents in DB: {agent_count}")
        logger.info(f"   Events in DB: {event_count}")
        logger.info(f"   Trends in DB: {trend_count}")
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Failed to show results: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–∏–º—É–ª—è—Ü–∏–∏."""
    logger.info("üöÄ CAPSIM Production Simulation - 300 Agents (Real DB)")
    logger.info("=" * 60)
    
    # Step 1: Check database connection
    logger.info("Step 1: Checking database connection...")
    if not check_database_connection():
        logger.error("‚ùå Cannot connect to database")
        return False
    
    # Step 2: Clear database tables
    logger.info("Step 2: Clearing database tables...")
    if not clear_database_tables():
        logger.error("‚ùå Failed to clear database tables")
        return False
    
    # Step 3: Create simulation with 300 agents
    logger.info("Step 3: Creating simulation with 300 agents...")
    simulation_id = create_simulation_300_agents()
    if not simulation_id:
        logger.error("‚ùå Simulation creation failed")
        return False
    
    # Step 4: Run production simulation
    logger.info("Step 4: Running production simulation (24 hours)...")
    success = run_production_simulation(simulation_id)
    
    if success:
        # Step 5: Show results
        logger.info("Step 5: Displaying results...")
        show_final_results(simulation_id)
        
        logger.info("üéâ Production simulation completed successfully!")
        logger.info(f"‚úÖ Simulation ID: {simulation_id}")
        logger.info("üíæ Data saved to capsim schema in capsim_db")
        logger.info("üîç Verify with:")
        logger.info(f"   SELECT COUNT(*) FROM capsim.persons WHERE simulation_id = '{simulation_id}';")
        logger.info(f"   SELECT COUNT(*) FROM capsim.events WHERE simulation_id = '{simulation_id}';")
        return True
    else:
        logger.error("‚ùå Production simulation failed")
        return False


if __name__ == "__main__":
    main() 