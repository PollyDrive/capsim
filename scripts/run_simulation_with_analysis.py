#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PublishPost actions.

–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ Persons
2. –î–æ–±–∞–≤–ª—è–µ—Ç seed actions —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç actions –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
4. –ë–∞—Ç—á–∞–º–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ actions —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
5. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–µ–ª–∞—é—â–∏—Ö PublishPost
"""

import os
import sys
import json
import asyncio
import logging
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Set
import psycopg2

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def analyze_simulation_results(simulation_id: str, db_repo) -> Dict[str, float]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å PublishPost.
    
    Args:
        simulation_id: ID —Å–∏–º—É–ª—è—Ü–∏–∏
        db_repo: Database repository instance
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ {simulation_id}")
    
    # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PublishPost —Å–æ–±—ã—Ç–∏–π
    publishpost_stats_query = """
    SELECT 
        COUNT(DISTINCT e.agent_id) as agents_with_publishpost,
        COUNT(*) as total_publishpost_events,
        (SELECT COUNT(*) FROM capsim.persons WHERE simulation_id = %s) as total_agents
    FROM capsim.events e
    WHERE e.simulation_id = %s 
    AND e.event_type = 'PublishPostAction'
    AND e.agent_id IS NOT NULL
    """
    
    # SQL –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
    agent_detail_query = """
    SELECT 
        p.id,
        p.profession,
        p.first_name,
        p.last_name,
        COUNT(e.event_id) as publishpost_count
    FROM capsim.persons p
    LEFT JOIN capsim.events e ON p.id = e.agent_id 
        AND e.event_type = 'PublishPostAction'
        AND e.simulation_id = %s
    WHERE p.simulation_id = %s
    GROUP BY p.id, p.profession, p.first_name, p.last_name
    ORDER BY publishpost_count DESC
    """
    
    # SQL –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
    profession_stats_query = """
    SELECT 
        p.profession,
        COUNT(DISTINCT p.id) as total_agents_profession,
        COUNT(DISTINCT CASE WHEN e.event_type = 'PublishPostAction' THEN e.agent_id END) as active_agents_profession,
        COUNT(CASE WHEN e.event_type = 'PublishPostAction' THEN e.event_id END) as total_posts_profession
    FROM capsim.persons p
    LEFT JOIN capsim.events e ON p.id = e.agent_id AND e.simulation_id = %s
    WHERE p.simulation_id = %s
    GROUP BY p.profession
    ORDER BY active_agents_profession DESC
    """
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result = await db_repo.execute_query(publishpost_stats_query, (simulation_id, simulation_id))
        main_stats = result[0] if result else {"agents_with_publishpost": 0, "total_publishpost_events": 0, "total_agents": 0}
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        agent_details = await db_repo.execute_query(agent_detail_query, (simulation_id, simulation_id))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
        profession_stats = await db_repo.execute_query(profession_stats_query, (simulation_id, simulation_id))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        total_agents = main_stats["total_agents"]
        agents_with_posts = main_stats["agents_with_publishpost"]
        total_posts = main_stats["total_publishpost_events"]
        
        percentage_active = (agents_with_posts / total_agents * 100) if total_agents > 0 else 0
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        analysis_results = {
            "simulation_id": simulation_id,
            "total_agents": total_agents,
            "agents_with_publishpost": agents_with_posts,
            "agents_without_posts": total_agents - agents_with_posts,
            "percentage_agents_with_posts": round(percentage_active, 2),
            "total_publishpost_events": total_posts,
            "avg_posts_per_active_agent": round(total_posts / agents_with_posts, 2) if agents_with_posts > 0 else 0,
            "timestamp": datetime.utcnow().isoformat()
        }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("üìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ò–ú–£–õ–Ø–¶–ò–ò")
        print("="*60)
        print(f"üÜî ID —Å–∏–º—É–ª—è—Ü–∏–∏: {simulation_id}")
        print(f"üë• –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {total_agents}")
        print(f"üìù –ê–≥–µ–Ω—Ç–æ–≤ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {agents_with_posts}")
        print(f"üö´ –ê–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {total_agents - agents_with_posts}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {percentage_active:.2f}%")
        print(f"üì∞ –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {total_posts}")
        print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {analysis_results['avg_posts_per_active_agent']}")
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        print(f"\nüèÜ –¢–û–ü-5 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –ê–ì–ï–ù–¢–û–í:")
        for i, agent in enumerate(agent_details[:5], 1):
            print(f"  {i}. {agent['first_name']} {agent['last_name']} ({agent['profession']}) - {agent['publishpost_count']} –ø–æ—Å—Ç–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
        print(f"\nüëî –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–†–û–§–ï–°–°–ò–Ø–ú:")
        for prof in profession_stats:
            prof_percentage = (prof['active_agents_profession'] / prof['total_agents_profession'] * 100) if prof['total_agents_profession'] > 0 else 0
            print(f"  {prof['profession']}: {prof['active_agents_profession']}/{prof['total_agents_profession']} ({prof_percentage:.1f}%) - {prof['total_posts_profession']} –ø–æ—Å—Ç–æ–≤")
        
        print("="*60)
        
        return analysis_results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {"error": str(e)}


async def run_simulation_with_analysis(
    num_agents: int = 300,
    duration_days: float = 1.0,
    enable_realtime: bool = False,
    sim_speed_factor: float = 60.0
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    Args:
        num_agents: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
        duration_days: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        enable_realtime: –í–∫–ª—é—á–∏—Ç—å realtime —Ä–µ–∂–∏–º
        sim_speed_factor: –§–∞–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ (60.0 = 1 —Å–∏–º-–º–∏–Ω—É—Ç–∞ = 1 —Ä–µ–∞–ª—å–Ω–∞—è —Å–µ–∫—É–Ω–¥–∞)
    """
    print("üöÄ CAPSIM Simulation with Analysis")
    print(f"üë• –ê–≥–µ–Ω—Ç–æ–≤: {num_agents}")
    print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π")
    print(f"üïê Realtime —Ä–µ–∂–∏–º: {'–î–∞' if enable_realtime else '–ù–µ—Ç'}")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {sim_speed_factor}x")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["SIM_SPEED_FACTOR"] = str(sim_speed_factor)
    os.environ["ENABLE_REALTIME"] = "true" if enable_realtime else "false"
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from capsim.engine.simulation_engine import SimulationEngine
        from capsim.db.repositories import DatabaseRepository
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        database_url = os.getenv("DATABASE_URL", "postgresql+asyncpg://capsim_rw:capsim321@localhost:5432/capsim_db")
        db_repo = DatabaseRepository(database_url)
        
        print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        engine = SimulationEngine(db_repo)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        print(f"\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å {num_agents} –∞–≥–µ–Ω—Ç–∞–º–∏...")
        await engine.initialize(num_agents=num_agents)
        
        print(f"‚úÖ –ê–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {len(engine.agents)}")
        print(f"‚úÖ ID —Å–∏–º—É–ª—è—Ü–∏–∏: {engine.simulation_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        initial_queue_size = len(engine.event_queue)
        print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {initial_queue_size}")
        
        simulation_start = time.time()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        print(f"\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
        await engine.run_simulation(duration_days=duration_days)
        
        simulation_duration = time.time() - simulation_start
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–≤–∏–∂–∫–∞
        engine_stats = engine.get_simulation_stats()
        
        print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {simulation_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {engine_stats['current_time']:.1f} –º–∏–Ω—É—Ç")
        print(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {engine_stats['active_trends']}")
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis_results = await analyze_simulation_results(str(engine.simulation_id), db_repo)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        results_file = f"simulation_results_{engine.simulation_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                "simulation_params": {
                    "num_agents": num_agents,
                    "duration_days": duration_days,
                    "enable_realtime": enable_realtime,
                    "sim_speed_factor": sim_speed_factor
                },
                "engine_stats": engine_stats,
                "analysis_results": analysis_results,
                "execution_time_seconds": simulation_duration
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
        
        # Cleanup
        await engine.shutdown()
        await db_repo.close()
        
        return analysis_results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        raise


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CAPSIM Simulation with Analysis")
    parser.add_argument("--agents", type=int, default=300, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ (default: 300)")
    parser.add_argument("--days", type=float, default=1.0, help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö (default: 1.0)")
    parser.add_argument("--realtime", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å realtime —Ä–µ–∂–∏–º")
    parser.add_argument("--speed", type=float, default=60.0, help="–§–∞–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ (default: 60.0)")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (50 –∞–≥–µ–Ω—Ç–æ–≤, 2 —á–∞—Å–∞)")
    
    args = parser.parse_args()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if args.test:
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        args.agents = 50
        args.days = 2.0 / 24.0  # 2 —á–∞—Å–∞
        args.speed = 60.0
    
    try:
        asyncio.run(run_simulation_with_analysis(
            num_agents=args.agents,
            duration_days=args.days,
            enable_realtime=args.realtime,
            sim_speed_factor=args.speed
        ))
        print("\nüéâ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 