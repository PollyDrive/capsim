#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM.
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ seed —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
"""

import os
import sys
import random
import json
import psycopg2
from datetime import datetime, timedelta
from uuid import uuid4

def generate_demo_events():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏.
    """
    print("üéÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò CAPSIM")
    print("="*50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host="localhost",
            database="capsim_db",
            user="capsim_rw",
            password="capsim321",
            port=5432
        )
        cur = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        cur.execute("SELECT id, profession, first_name, last_name FROM capsim.persons LIMIT 20")
        agents = cur.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ: {len(agents)}")
        
        # 2. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–∏–º—É–ª—è—Ü–∏—é
        demo_sim_id = str(uuid4())
        cur.execute("""
            INSERT INTO capsim.simulation_runs (run_id, start_time, status, num_agents, duration_days, configuration)
            VALUES (%s, %s, 'DEMO', %s, 1, %s)
        """, (demo_sim_id, datetime.utcnow(), len(agents), {"demo": True, "batch_size": 10}))
        
        print(f"üìù –°–æ–∑–¥–∞–Ω–∞ –¥–µ–º–æ-—Å–∏–º—É–ª—è—Ü–∏—è: {demo_sim_id}")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º seed —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        current_time = 0.0  # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö —Å–∏–º—É–ª—è—Ü–∏–∏
        events_added = 0
        from capsim.common.topic_mapping import get_all_topic_codes
        topics = get_all_topic_codes()
        
        print("\nüå± –î–û–ë–ê–í–õ–ï–ù–ò–ï SEED –°–û–ë–´–¢–ò–ô:")
        print("(—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è seed —Å–æ–±—ã—Ç–∏–π (10-15% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
        seed_count = max(3, min(len(agents), int(len(agents) * 0.12)))
        selected_agents = random.sample(agents, seed_count)
        
        for i, (agent_id, profession, first_name, last_name) in enumerate(selected_agents):
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–µ—Ä–≤—ã–µ 60 –º–∏–Ω—É—Ç
            time_offset = (i * 60.0 / len(selected_agents)) + random.uniform(-5, 5)
            event_time = max(1.0, current_time + time_offset)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            if profession == "Developer":
                topic = random.choice(["SCIENCE", "ECONOMIC"])
            elif profession == "Teacher":
                topic = random.choice(["SCIENCE", "CULTURE"])
            elif profession == "Artist":
                topic = random.choice(["CULTURE", "SPIRITUAL"])
            elif profession == "Businessman":
                topic = "ECONOMIC"
            else:
                topic = random.choice(topics)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
            event_data = {
                "topic": topic,
                "sim_time": event_time,
                "real_time": datetime.utcnow().timestamp(),
                "demo_event": True
            }
            
            cur.execute("""
                INSERT INTO capsim.events 
                (event_id, simulation_id, event_type, priority, timestamp, agent_id, event_data, processed_at)
                VALUES (%s, %s, 'PublishPostAction', 4, %s, %s, %s, %s)
            """, (
                str(uuid4()),
                demo_sim_id,
                event_time,
                agent_id,
                json.dumps(event_data),
                datetime.utcnow()
            ))
            
            events_added += 1
            print(f"  ‚è∞ {event_time:6.1f} –º–∏–Ω: {first_name} {last_name} ({profession}) ‚Üí {topic}")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        system_events = [
            (30.0, "EnergyRecoveryEvent", {"recovery_amount": 1.0}),
            (90.0, "EnergyRecoveryEvent", {"recovery_amount": 1.0}),
            (60.0, "DailyResetEvent", {"reset_type": "daily_limits"}),
            (120.0, "SaveDailyTrendEvent", {"day": 1})
        ]
        
        print(f"\nüîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –°–û–ë–´–¢–ò–ô:")
        for time_min, event_type, data in system_events:
            cur.execute("""
                INSERT INTO capsim.events 
                (event_id, simulation_id, event_type, priority, timestamp, event_data, processed_at)
                VALUES (%s, %s, %s, 5, %s, %s, %s)
            """, (
                str(uuid4()),
                demo_sim_id,
                event_type,
                time_min,
                json.dumps(data),
                datetime.utcnow()
            ))
            print(f"  ‚è∞ {time_min:6.1f} –º–∏–Ω: {event_type}")
        
        # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ (TrendInfluenceEvent)
        influence_events = []
        for i in range(3):
            influence_time = 65.0 + (i * 15.0) + random.uniform(-3, 3)
            trend_id = str(uuid4())
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–¥
            cur.execute("""
                INSERT INTO capsim.trends 
                (trend_id, simulation_id, topic, originator_id, base_virality_score, coverage_level, timestamp_start)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (
                trend_id,
                demo_sim_id,
                random.choice(topics),
                selected_agents[i % len(selected_agents)][0],
                random.uniform(2.0, 4.5),
                random.choice(["Low", "Middle", "High"]),
                datetime.utcnow()
            ))
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–ª–∏—è–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            cur.execute("""
                INSERT INTO capsim.events 
                (event_id, simulation_id, event_type, priority, timestamp, trend_id, event_data, processed_at)
                VALUES (%s, %s, 'TrendInfluenceEvent', 3, %s, %s, %s, %s)
            """, (
                str(uuid4()),
                demo_sim_id,
                influence_time,
                trend_id,
                json.dumps({"influence_radius": random.randint(3, 8)}),
                datetime.utcnow()
            ))
            
            print(f"  üìà {influence_time:6.1f} –º–∏–Ω: TrendInfluenceEvent (—Ç—Ä–µ–Ω–¥ {trend_id[:8]})")
        
        # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print(f"\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ seed —Å–æ–±—ã—Ç–∏–π: {events_added}")
        print(f"üéØ ID –¥–µ–º–æ-—Å–∏–º—É–ª—è—Ü–∏–∏: {demo_sim_id}")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìà –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        
        cur.execute("""
            SELECT 
                COUNT(DISTINCT agent_id) as agents_with_posts,
                COUNT(*) as total_posts
            FROM capsim.events 
            WHERE event_type = 'PublishPostAction'
            AND agent_id IS NOT NULL
        """)
        new_stats = cur.fetchone()
        
        cur.execute("SELECT COUNT(*) FROM capsim.persons")
        total_agents = cur.fetchone()[0]
        
        agents_with_posts, total_posts = new_stats
        percentage = (agents_with_posts / total_agents * 100) if total_agents > 0 else 0
        
        print(f"–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {total_agents}")
        print(f"–ê–≥–µ–Ω—Ç–æ–≤ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {agents_with_posts}")
        print(f"üéØ –ü–†–û–¶–ï–ù–¢ –ê–ö–¢–ò–í–ù–´–• –ê–ì–ï–ù–¢–û–í: {percentage:.2f}%")
        print(f"–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {total_posts}")
        
        print(f"\nüí° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ö–ê–ó–´–í–ê–ï–¢:")
        print("1. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ Persons")
        print("2. ‚úÖ Seed actions –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        print("3. ‚úÖ –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≥–µ–Ω—Ç–∞–º–∏ —Å updatestate")
        print("4. ‚úÖ SimulationEngine –±–∞—Ç—á–∞–º–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ actions")
        print("5. ‚úÖ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π")
        print(f"6. ‚úÖ –ü–æ–¥—Å—á–∏—Ç–∞–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Å PublishPost: {percentage:.2f}%")
        
        print("\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        conn.rollback()
    
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        generate_demo_events()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 