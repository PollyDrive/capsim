#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º @senior-db.mdc

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –∏–∑ –¢–ó  
2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω –∏ —Å–∫–ª–æ–Ω–µ–Ω–∏–π
3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å agent_id/trend_id
4. –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å parent_trend_id –≤ trends
"""

import asyncio
import asyncpg
import json
import logging
from datetime import datetime, date
from typing import Dict, List, Tuple, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º –∏–∑ –¢–ó (—Ç–∞–±–ª–∏—Ü–∞ 2.4)
PROFESSION_RANGES = {
    "ShopClerk": {
        "financial_capability": (2.0, 4.0),
        "trend_receptivity": (1.0, 3.0), 
        "social_status": (1.0, 3.0),
        "energy_level": (2.0, 5.0),
        "time_budget": (3.0, 5.0)
    },
    "Worker": {
        "financial_capability": (2.0, 4.0),
        "trend_receptivity": (1.0, 3.0),
        "social_status": (1.0, 2.0),
        "energy_level": (2.0, 5.0),
        "time_budget": (3.0, 5.0)
    },
    "Developer": {
        "financial_capability": (3.0, 5.0),
        "trend_receptivity": (3.0, 5.0),
        "social_status": (2.0, 4.0),
        "energy_level": (2.0, 5.0),
        "time_budget": (2.0, 4.0)
    },
    "Politician": {
        "financial_capability": (3.0, 5.0),
        "trend_receptivity": (3.0, 5.0),
        "social_status": (4.0, 5.0),
        "energy_level": (2.0, 4.0),
        "time_budget": (2.0, 4.0)
    },
    "Blogger": {
        "financial_capability": (2.0, 4.0),
        "trend_receptivity": (4.0, 5.0),
        "social_status": (3.0, 5.0),
        "energy_level": (2.0, 5.0),
        "time_budget": (3.0, 5.0)
    },
    "Businessman": {
        "financial_capability": (4.0, 5.0),
        "trend_receptivity": (2.0, 4.0),
        "social_status": (4.0, 5.0),
        "energy_level": (2.0, 5.0),
        "time_budget": (2.0, 4.0)
    },
    "SpiritualMentor": {
        "financial_capability": (1.0, 3.0),
        "trend_receptivity": (2.0, 5.0),
        "social_status": (2.0, 4.0),
        "energy_level": (3.0, 5.0),
        "time_budget": (2.0, 4.0)
    },
    "Philosopher": {
        "financial_capability": (1.0, 3.0),
        "trend_receptivity": (1.0, 3.0),
        "social_status": (1.0, 3.0),
        "energy_level": (2.0, 4.0),
        "time_budget": (2.0, 4.0)
    },
    "Unemployed": {
        "financial_capability": (1.0, 2.0),
        "trend_receptivity": (3.0, 5.0),
        "social_status": (1.0, 2.0),
        "energy_level": (3.0, 5.0),
        "time_budget": (3.0, 5.0)
    },
    "Teacher": {
        "financial_capability": (1.0, 3.0),
        "trend_receptivity": (1.0, 3.0),
        "social_status": (2.0, 4.0),
        "energy_level": (1.0, 3.0),
        "time_budget": (2.0, 4.0)
    },
    "Artist": {
        "financial_capability": (1.0, 3.0),
        "trend_receptivity": (2.0, 4.0),
        "social_status": (2.0, 4.0),
        "energy_level": (4.0, 5.0),
        "time_budget": (3.0, 5.0)
    },
    "Doctor": {
        "financial_capability": (2.0, 4.0),
        "trend_receptivity": (1.0, 3.0),
        "social_status": (3.0, 5.0),
        "energy_level": (2.0, 4.0),
        "time_budget": (1.0, 2.0)
    }
}

VALID_PROFESSIONS = list(PROFESSION_RANGES.keys())
VALID_TOPICS = ["Economic", "Health", "Spiritual", "Conspiracy", "Science", "Culture", "Sport"]

# –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
RUSSIAN_MALE_NAMES = ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–î–º–∏—Ç—Ä–∏–π", "–ú–∞–∫—Å–∏–º", "–°–µ—Ä–≥–µ–π", "–ê–Ω–¥—Ä–µ–π", "–ê–ª–µ–∫—Å–µ–π", "–ê—Ä—Ç–µ–º", "–ò–ª—å—è", "–ö–∏—Ä–∏–ª–ª", "–ú–∏—Ö–∞–∏–ª"]
RUSSIAN_FEMALE_NAMES = ["–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞", "–û–ª—å–≥–∞", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ò—Ä–∏–Ω–∞", "–Æ–ª–∏—è", "–í–∏–∫—Ç–æ—Ä–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"]

async def connect_db() -> asyncpg.Connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = await asyncpg.connect("postgresql://capsim_rw:capsim321@localhost:5432/capsim_db")
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

async def validate_agents(conn: asyncpg.Connection) -> Tuple[List[str], List[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
    
    Returns:
        Tuple[valid_agents, invalid_agents]
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    agents = await conn.fetch("""
        SELECT id, profession, first_name, last_name, gender, date_of_birth,
               financial_capability, trend_receptivity, social_status, 
               energy_level, time_budget, interests
        FROM capsim.persons
    """)
    
    valid_agents = []
    invalid_agents = []
    
    for agent in agents:
        violations = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        if agent['profession'] not in VALID_PROFESSIONS:
            violations.append(f"Invalid profession: {agent['profession']}")
            
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        if agent['profession'] in PROFESSION_RANGES:
            ranges = PROFESSION_RANGES[agent['profession']]
            
            for attr, (min_val, max_val) in ranges.items():
                value = agent[attr]
                if not (min_val <= value <= max_val):
                    violations.append(f"{attr}={value} not in range [{min_val}, {max_val}]")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
        if agent['gender'] == 'male':
            if agent['first_name'] not in RUSSIAN_MALE_NAMES:
                violations.append(f"Non-Russian male name: {agent['first_name']}")
        elif agent['gender'] == 'female':
            if agent['first_name'] not in RUSSIAN_FEMALE_NAMES:
                violations.append(f"Non-Russian female name: {agent['first_name']}")
                
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (18-65 –ª–µ—Ç)
        if agent['date_of_birth']:
            today = date.today()
            age = today.year - agent['date_of_birth'].year
            if not (18 <= age <= 65):
                violations.append(f"Invalid age: {age} (must be 18-65)")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (0.0-5.0)
        for attr in ['financial_capability', 'trend_receptivity', 'social_status', 'energy_level']:
            value = agent[attr]
            if not (0.0 <= value <= 5.0):
                violations.append(f"{attr}={value} not in range [0.0, 5.0]")
                
        if violations:
            invalid_agents.append({
                "id": str(agent['id']),
                "name": f"{agent['first_name']} {agent['last_name']}",
                "profession": agent['profession'],
                "violations": violations
            })
        else:
            valid_agents.append(str(agent['id']))
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(valid_agents)}")
    logger.info(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(invalid_agents)}")
    
    return valid_agents, invalid_agents

async def validate_events(conn: asyncpg.Connection) -> Dict:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –∏—Ö —Å–≤—è–∑–µ–π."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π...")
    
    # –°–æ–±—ã—Ç–∏—è –±–µ–∑ agent_id –ò–õ–ò trend_id (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏)
    system_events = await conn.fetch("""
        SELECT event_type, COUNT(*) as count
        FROM capsim.events 
        WHERE agent_id IS NULL AND trend_id IS NULL
        GROUP BY event_type
        ORDER BY count DESC
    """)
    
    # –°–æ–±—ã—Ç–∏—è —Å agent_id (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∞–≥–µ–Ω—Ç–æ–≤)
    agent_events = await conn.fetch("""
        SELECT event_type, COUNT(*) as count
        FROM capsim.events 
        WHERE agent_id IS NOT NULL
        GROUP BY event_type
        ORDER BY count DESC
    """)
    
    # –°–æ–±—ã—Ç–∏—è —Å trend_id (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —Ç—Ä–µ–Ω–¥–∞–º–∏)
    trend_events = await conn.fetch("""
        SELECT event_type, COUNT(*) as count
        FROM capsim.events 
        WHERE trend_id IS NOT NULL
        GROUP BY event_type
        ORDER BY count DESC
    """)
    
    return {
        "system_events": [(row['event_type'], row['count']) for row in system_events],
        "agent_events": [(row['event_type'], row['count']) for row in agent_events],
        "trend_events": [(row['event_type'], row['count']) for row in trend_events]
    }

async def validate_trends(conn: asyncpg.Connection) -> Dict:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –∏ parent_trend_id."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ parent_trend_id
    trends_stat = await conn.fetchrow("""
        SELECT COUNT(*) as total,
               COUNT(parent_trend_id) as with_parent,
               COUNT(*) - COUNT(parent_trend_id) as without_parent
        FROM capsim.trends
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ parent_trend_id (self-references)
    self_refs = await conn.fetch("""
        SELECT trend_id, parent_trend_id
        FROM capsim.trends
        WHERE trend_id = parent_trend_id
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö parent_trend_id
    orphan_parents = await conn.fetch("""
        SELECT t1.trend_id, t1.parent_trend_id
        FROM capsim.trends t1
        LEFT JOIN capsim.trends t2 ON t1.parent_trend_id = t2.trend_id
        WHERE t1.parent_trend_id IS NOT NULL AND t2.trend_id IS NULL
    """)
    
    return {
        "total_trends": trends_stat['total'],
        "with_parent": trends_stat['with_parent'],
        "without_parent": trends_stat['without_parent'],
        "self_references": len(self_refs),
        "orphan_parents": len(orphan_parents)
    }

async def clean_invalid_agents(conn: asyncpg.Connection, invalid_agents: List[Dict]) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–µ.
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        invalid_agents: –°–ø–∏—Å–æ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    """
    if not invalid_agents:
        logger.info("üéâ –ù–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return 0
    
    agent_ids = [agent['id'] for agent in invalid_agents]
    logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ {len(agent_ids)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        async with conn.transaction():
            # 1. –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç—Ç–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
            trend_ids_result = await conn.fetch("""
                SELECT trend_id FROM capsim.trends 
                WHERE originator_id = ANY($1::uuid[])
            """, agent_ids)
            trend_ids = [row['trend_id'] for row in trend_ids_result]
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(trend_ids)}")
            
            # 2. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
            events_by_agent_deleted = await conn.execute("""
                DELETE FROM capsim.events 
                WHERE agent_id = ANY($1::uuid[])
            """, agent_ids)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {events_by_agent_deleted}")
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ —ç—Ç–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if trend_ids:
                events_by_trend_deleted = await conn.execute("""
                    DELETE FROM capsim.events 
                    WHERE trend_id = ANY($1::uuid[])
                """, trend_ids)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–Ω–¥–æ–≤: {events_by_trend_deleted}")
            
            # 4. –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ 
            trends_deleted = await conn.execute("""
                DELETE FROM capsim.trends 
                WHERE originator_id = ANY($1::uuid[])
            """, agent_ids)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–µ–Ω–¥–æ–≤: {trends_deleted}")
            
            # 5. –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            history_deleted = await conn.execute("""
                DELETE FROM capsim.person_attribute_history 
                WHERE person_id = ANY($1::uuid[])
            """, agent_ids)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {history_deleted}")
            
            # 6. –ù–∞–∫–æ–Ω–µ—Ü —É–¥–∞–ª—è–µ–º —Å–∞–º–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            agents_deleted = await conn.execute("""
                DELETE FROM capsim.persons 
                WHERE id = ANY($1::uuid[])
            """, agent_ids)
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {agents_deleted}")
            return len(agent_ids)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏."""
    print("üß™ CAPSIM Data Validation & Cleanup Tool")
    print("=" * 60)
    
    conn = await connect_db()
    
    try:
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        valid_agents, invalid_agents = await validate_agents(conn)
        
        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        events_stat = await validate_events(conn)
        
        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
        trends_stat = await validate_trends(conn)
        
        # –û—Ç—á–µ—Ç
        print("\nüìä –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò:")
        print("-" * 40)
        print(f"üë• –ê–≥–µ–Ω—Ç—ã:")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ: {len(valid_agents)}")
        print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ: {len(invalid_agents)}")
        
        if invalid_agents:
            print(f"\nüîç –î–µ—Ç–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:")
            for agent in invalid_agents[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {agent['name']} ({agent['profession']})")
                for violation in agent['violations']:
                    print(f"     - {violation}")
                    
        print(f"\nüìÖ –°–æ–±—ã—Ç–∏—è:")
        print(f"   üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ: {len(events_stat['system_events'])} —Ç–∏–ø–æ–≤")
        print(f"   üë§ –ê–≥–µ–Ω—Ç–æ–≤: {len(events_stat['agent_events'])} —Ç–∏–ø–æ–≤") 
        print(f"   üìà –¢—Ä–µ–Ω–¥–æ–≤: {len(events_stat['trend_events'])} —Ç–∏–ø–æ–≤")
        
        print(f"\nüìà –¢—Ä–µ–Ω–¥—ã:")
        print(f"   üìä –í—Å–µ–≥–æ: {trends_stat['total_trends']}")
        print(f"   üîó –° parent_trend_id: {trends_stat['with_parent']}")
        print(f"   ‚≠ê –ë–µ–∑ parent (–∫–æ—Ä–Ω–µ–≤—ã–µ): {trends_stat['without_parent']}")
        
        if trends_stat['self_references'] > 0:
            print(f"   ‚ö†Ô∏è Self-references: {trends_stat['self_references']}")
        if trends_stat['orphan_parents'] > 0:
            print(f"   ‚ö†Ô∏è Orphan parents: {trends_stat['orphan_parents']}")
            
        # 4. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
        if invalid_agents:
            print(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {len(invalid_agents)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤? (y/N): ", end="")
            response = input().strip().lower()
            
            if response == 'y':
                deleted = await clean_invalid_agents(conn, invalid_agents)
                print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted} –∞–≥–µ–Ω—Ç–æ–≤.")
            else:
                print("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        print(f"\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S')}")
        
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(main()) 