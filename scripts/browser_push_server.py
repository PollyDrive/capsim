#!/usr/bin/env python3
"""
–°–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Grafana
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 8001 –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç webhook-–∏ –æ—Ç Grafana Alerting
"""

import json
import logging
import os
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis/DB)
notifications_store = []

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>CAPSIM Performance Alerts</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; }
        .alert { 
            background: white; 
            border-left: 4px solid #ff6b6b; 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .alert.warning { border-left-color: #ffa500; }
        .alert.info { border-left-color: #3498db; }
        .alert.critical { border-left-color: #e74c3c; }
        .alert-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; }
        .alert-time { color: #666; font-size: 12px; }
        .alert-body { margin: 10px 0; }
        .alert-actions { margin-top: 10px; }
        .btn { 
            padding: 8px 16px; 
            margin-right: 10px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            text-decoration: none;
            display: inline-block;
        }
        .btn-primary { background: #3498db; color: white; }
        .btn-secondary { background: #95a5a6; color: white; }
        .stats { background: white; padding: 15px; border-radius: 4px; margin-bottom: 20px; }
        .refresh-btn { 
            position: fixed; 
            top: 20px; 
            right: 20px; 
            background: #27ae60; 
            color: white; 
            padding: 10px 20px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer;
        }
        .clear-btn { 
            position: fixed; 
            top: 20px; 
            right: 150px; 
            background: #e74c3c; 
            color: white; 
            padding: 10px 20px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer;
        }
        .no-alerts { 
            text-align: center; 
            color: #666; 
            font-style: italic; 
            padding: 40px; 
            background: white; 
            border-radius: 4px;
        }
        .enable-push { 
            background: #f39c12; 
            color: white; 
            padding: 15px; 
            border-radius: 4px; 
            margin-bottom: 20px;
            text-align: center;
        }
        .enable-push button { 
            background: #e67e22; 
            color: white; 
            padding: 10px 20px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <button class="refresh-btn" onclick="location.reload()">üîÑ Refresh</button>
    <button class="clear-btn" onclick="clearNotifications()">üóëÔ∏è Clear All</button>
    
    <div class="container">
        <h1>üö® CAPSIM Performance Alerts</h1>
        
        <div class="enable-push">
            <strong>üì± Enable Browser Notifications</strong>
            <button onclick="enablePushNotifications()">Enable Push Notifications</button>
        </div>
        
        <div class="stats">
            <strong>üìä Statistics:</strong>
            Total alerts: {{ total_alerts }} | 
            Critical: {{ critical_count }} | 
            Warning: {{ warning_count }} | 
            Info: {{ info_count }}
        </div>
        
        {% if notifications %}
            {% for notification in notifications %}
            <div class="alert {{ notification.severity }}">
                <div class="alert-title">{{ notification.title }}</div>
                <div class="alert-time">{{ notification.timestamp }}</div>
                <div class="alert-body">{{ notification.body }}</div>
                <div class="alert-actions">
                    {% if notification.dashboard_url %}
                    <a href="{{ notification.dashboard_url }}" class="btn btn-primary" target="_blank">üìä View Dashboard</a>
                    {% endif %}
                    <button class="btn btn-secondary" onclick="dismissAlert('{{ notification.id }}')">‚úñÔ∏è Dismiss</button>
                </div>
            </div>
            {% endfor %}
        {% else %}
            <div class="no-alerts">
                ‚úÖ No active alerts. System is running normally.
            </div>
        {% endif %}
    </div>

    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        async function enablePushNotifications() {
            if ('Notification' in window) {
                const permission = await Notification.requestPermission();
                if (permission === 'granted') {
                    alert('‚úÖ Push notifications enabled!');
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º service worker –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    if ('serviceWorker' in navigator) {
                        navigator.serviceWorker.register('/sw.js');
                    }
                } else {
                    alert('‚ùå Push notifications blocked by browser');
                }
            } else {
                alert('‚ùå Browser does not support notifications');
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        function showPushNotification(title, body, icon) {
            if (Notification.permission === 'granted') {
                new Notification(title, {
                    body: body,
                    icon: icon || '/static/alert-icon.png',
                    badge: '/static/badge.png',
                    tag: 'performance-alert',
                    requireInteraction: true
                });
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        async function clearNotifications() {
            if (confirm('Clear all notifications?')) {
                const response = await fetch('/api/notifications/clear', {
                    method: 'POST'
                });
                if (response.ok) {
                    location.reload();
                }
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        async function dismissAlert(alertId) {
            const response = await fetch(`/api/notifications/${alertId}/dismiss`, {
                method: 'POST'
            });
            if (response.ok) {
                location.reload();
            }
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            location.reload();
        }, 30000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ polling
        async function checkForNewAlerts() {
            try {
                const response = await fetch('/api/notifications/latest');
                const data = await response.json();
                
                if (data.new_alerts && data.new_alerts.length > 0) {
                    data.new_alerts.forEach(alert => {
                        showPushNotification(alert.title, alert.body, alert.icon);
                    });
                }
            } catch (error) {
                console.error('Error checking for new alerts:', error);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(checkForNewAlerts, 10000);
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_alerts = len(notifications_store)
    critical_count = sum(1 for n in notifications_store if n.get('severity') == 'critical')
    warning_count = sum(1 for n in notifications_store if n.get('severity') == 'warning')
    info_count = sum(1 for n in notifications_store if n.get('severity') == 'info')
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    sorted_notifications = sorted(notifications_store, key=lambda x: x.get('timestamp', ''), reverse=True)
    
    return render_template_string(
        NOTIFICATION_TEMPLATE,
        notifications=sorted_notifications,
        total_alerts=total_alerts,
        critical_count=critical_count,
        warning_count=warning_count,
        info_count=info_count
    )

@app.route('/api/notifications/browser-push', methods=['POST'])
def handle_browser_push():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∞ –æ—Ç Grafana –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        logger.info(f"Received alert webhook: {json.dumps(data, indent=2)}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Grafana
        if isinstance(data, dict) and 'alerts' in data:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç Grafana Alerting
            alerts = data['alerts']
            for alert in alerts:
                notification = {
                    'id': f"alert-{int(time.time())}-{alert.get('fingerprint', 'unknown')}",
                    'title': f"üö® {alert.get('labels', {}).get('alertname', 'Unknown Alert')}",
                    'body': alert.get('annotations', {}).get('summary', 'No summary available'),
                    'severity': alert.get('labels', {}).get('severity', 'info'),
                    'component': alert.get('labels', {}).get('component', 'system'),
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'dashboard_url': f"http://localhost:3000/d/performance-tuning",
                    'raw_data': alert
                }
                notifications_store.append(notification)
                logger.info(f"Added notification: {notification['title']}")
        
        elif isinstance(data, dict) and 'title' in data:
            # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç webhook
            notification = {
                'id': f"direct-{int(time.time())}",
                'title': data.get('title', 'Performance Alert'),
                'body': data.get('body', 'No details available'),
                'severity': data.get('data', {}).get('severity', 'info'),
                'component': 'system',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'dashboard_url': data.get('data', {}).get('dashboard_url'),
                'raw_data': data
            }
            notifications_store.append(notification)
            logger.info(f"Added direct notification: {notification['title']}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(notifications_store) > 100:
            notifications_store[:] = notifications_store[-100:]
        
        return jsonify({
            'status': 'success',
            'message': 'Notification received',
            'count': len(notifications_store)
        })
        
    except Exception as e:
        logger.error(f"Error processing browser push: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 500

@app.route('/api/notifications/latest')
def get_latest_notifications():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è polling)"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    latest = notifications_store[-10:] if notifications_store else []
    return jsonify({
        'notifications': latest,
        'total': len(notifications_store),
        'new_alerts': []  # –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
    })

@app.route('/api/notifications/clear', methods=['POST'])
def clear_notifications():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notifications_store.clear()
    logger.info("Cleared all notifications")
    return jsonify({'status': 'success', 'message': 'All notifications cleared'})

@app.route('/api/notifications/<notification_id>/dismiss', methods=['POST'])
def dismiss_notification(notification_id):
    """–°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global notifications_store
    notifications_store = [n for n in notifications_store if n.get('id') != notification_id]
    logger.info(f"Dismissed notification: {notification_id}")
    return jsonify({'status': 'success', 'message': 'Notification dismissed'})

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'notifications_count': len(notifications_store)
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8001))
    debug = os.environ.get('DEBUG', 'false').lower() == 'true'
    
    logger.info(f"Starting browser push notification server on port {port}")
    logger.info(f"Access dashboard at: http://localhost:{port}")
    logger.info(f"Webhook endpoint: http://localhost:{port}/api/notifications/browser-push")
    
    app.run(host='0.0.0.0', port=port, debug=debug) 