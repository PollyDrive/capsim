#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ timestamp —Å–æ–±—ã—Ç–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
"""

import asyncio
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_timestamp_analysis():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç timestamp —Å–æ–±—ã—Ç–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        from capsim.engine.simulation_engine import SimulationEngine
        from capsim.db.repositories import DatabaseRepository
        from capsim.common.settings import settings
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ë–î
        db_repo = DatabaseRepository(settings.DATABASE_URL)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        engine = SimulationEngine(db_repo)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ 15 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await engine.initialize(num_agents=10, duration_days=0.01)  # 10 –∞–≥–µ–Ω—Ç–æ–≤, 14.4 –º–∏–Ω—É—Ç—ã
        
        logger.info("=== –ê–ù–ê–õ–ò–ó TIMESTAMP –°–û–ë–´–¢–ò–ô ===")
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏: {engine.end_time} –º–∏–Ω—É—Ç")
        logger.info(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {engine.current_time} –º–∏–Ω—É—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º seed —Å–æ–±—ã—Ç–∏—è
        seed_events = []
        for event in engine.event_queue:
            if hasattr(event.event, 'agent_id'):
                seed_events.append({
                    'type': event.event.__class__.__name__,
                    'timestamp': event.timestamp,
                    'agent_id': str(event.event.agent_id),
                    'priority': event.priority
                })
        
        logger.info("=== SEED –°–û–ë–´–¢–ò–Ø ===")
        for event in sorted(seed_events, key=lambda x: x['timestamp']):
            logger.info(f"{event['type']} - –∞–≥–µ–Ω—Ç {event['agent_id']} - –≤—Ä–µ–º—è {event['timestamp']:.1f} –º–∏–Ω")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        system_events = []
        for event in engine.event_queue:
            if not hasattr(event.event, 'agent_id'):
                system_events.append({
                    'type': event.event.__class__.__name__,
                    'timestamp': event.timestamp,
                    'priority': event.priority
                })
        
        logger.info("=== –°–ò–°–¢–ï–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø ===")
        for event in sorted(system_events, key=lambda x: x['timestamp']):
            logger.info(f"{event['type']} - –≤—Ä–µ–º—è {event['timestamp']:.1f} –º–∏–Ω - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {event['priority']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        logger.info("=== –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• –î–ï–ô–°–¢–í–ò–ô ===")
        for minute in range(0, int(engine.end_time) + 1):
            if minute % 2 == 0:  # –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                logger.info(f"–ù–∞ {minute}-–π –º–∏–Ω—É—Ç–µ –±—É–¥—É—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –∞–≥–µ–Ω—Ç–æ–≤
        logger.info("=== –ê–ù–ê–õ–ò–ó –≠–ù–ï–†–ì–ò–ò –ê–ì–ï–ù–¢–û–í ===")
        for i, agent in enumerate(engine.agents[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –∞–≥–µ–Ω—Ç–æ–≤
            logger.info(f"–ê–≥–µ–Ω—Ç {i+1} ({agent.profession}): —ç–Ω–µ—Ä–≥–∏—è={agent.energy_level:.2f}, –≤—Ä–µ–º—è={agent.time_budget:.2f}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logger.info("=== –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ===")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        original_end_time = engine.end_time
        engine.end_time = 10.0  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –º–∏–Ω—É—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await engine.run_simulation()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===")
        logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {engine.current_time:.1f} –º–∏–Ω—É—Ç")
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(engine.event_queue)}")
        logger.info(f"–°–æ–±—ã—Ç–∏–π –≤ batch: {len(engine._aggregated_events)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
        events_by_type = {}
        for event in engine._aggregated_events:
            event_type = event.get('event_type', 'Unknown')
            events_by_type[event_type] = events_by_type.get(event_type, 0) + 1
        
        logger.info("=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –ü–û –¢–ò–ü–ê–ú ===")
        for event_type, count in events_by_type.items():
            logger.info(f"{event_type}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        logger.info("=== –≠–ù–ï–†–ì–ò–Ø –ê–ì–ï–ù–¢–û–í –ü–û–°–õ–ï –°–ò–ú–£–õ–Ø–¶–ò–ò ===")
        for i, agent in enumerate(engine.agents[:5]):
            logger.info(f"–ê–≥–µ–Ω—Ç {i+1} ({agent.profession}): —ç–Ω–µ—Ä–≥–∏—è={agent.energy_level:.2f}, –≤—Ä–µ–º—è={agent.time_budget:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        agent_events = [e for e in engine._aggregated_events if e.get('agent_id')]
        if agent_events:
            logger.info(f"‚úÖ –°–û–ó–î–ê–ù–û {len(agent_events)} –°–û–ë–´–¢–ò–ô –ê–ì–ï–ù–¢–û–í")
            return True
        else:
            logger.warning("‚ö†Ô∏è –°–û–ë–´–¢–ò–Ø –ê–ì–ï–ù–¢–û–í –ù–ï –°–û–ó–î–ê–í–ê–õ–ò–°–¨")
            return False
        
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    success = asyncio.run(test_timestamp_analysis())
    
    if success:
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –ê–ù–ê–õ–ò–ó –ü–†–û–í–ê–õ–ï–ù: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π!")
        exit(1) 