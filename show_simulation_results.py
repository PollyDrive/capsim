#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM
"""

import asyncio
import os
from capsim.db.repositories import DatabaseRepository
from capsim.common.db_config import ASYNC_DSN
from datetime import datetime

async def show_simulation_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –Ω–∞–≥–ª—è–¥–Ω–æ–º –≤–∏–¥–µ."""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ DSN –∏–∑ env
    db_repo = DatabaseRepository(ASYNC_DSN)
    
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò CAPSIM")
    print("=" * 50)
    
    # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 30)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
    persons_count = await db_repo.get_persons_count()
    print(f"üë• –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {persons_count}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
    events_result = await db_repo.execute_query("SELECT COUNT(*) as count FROM capsim.events")
    total_events = events_result[0]['count']
    print(f"üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–¥–æ–≤
    trends_result = await db_repo.execute_query("SELECT COUNT(*) as count FROM capsim.trends")
    total_trends = trends_result[0]['count']
    print(f"üî• –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–¥–æ–≤: {total_trends}")
    
    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
    print("\nüë®‚Äçüíº –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–†–û–§–ï–°–°–ò–Ø–ú:")
    print("-" * 40)
    
    profession_stats = await db_repo.execute_query("""
        SELECT profession, COUNT(*) as count 
        FROM capsim.persons 
        GROUP BY profession 
        ORDER BY count DESC
    """)
    
    for row in profession_stats:
        percentage = (row['count'] / persons_count) * 100
        print(f"  {row['profession']:<15} | {row['count']:>3} ({percentage:>5.1f}%)")
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
    print("\n‚ö° –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –°–û–ë–´–¢–ò–ô:")
    print("-" * 40)
    
    event_stats = await db_repo.execute_query("""
        SELECT event_type, COUNT(*) as count 
        FROM capsim.events 
        GROUP BY event_type 
        ORDER BY count DESC
    """)
    
    for row in event_stats:
        percentage = (row['count'] / total_events) * 100
        print(f"  {row['event_type']:<20} | {row['count']:>4} ({percentage:>5.1f}%)")
    
    # 4. –¢—Ä–µ–Ω–¥—ã –ø–æ —Ç–µ–º–∞–º
    print("\nüî• –¢–†–ï–ù–î–´ –ü–û –¢–ï–ú–ê–ú:")
    print("-" * 30)
    
    trend_stats = await db_repo.execute_query("""
        SELECT topic, COUNT(*) as count, 
               AVG(base_virality_score) as avg_virality,
               SUM(total_interactions) as total_interactions
        FROM capsim.trends 
        GROUP BY topic 
        ORDER BY count DESC
    """)
    
    for row in trend_stats:
        print(f"  {row['topic']:<12} | {row['count']:>2} —Ç—Ä–µ–Ω–¥–æ–≤ | "
              f"–≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: {row['avg_virality']:.3f} | "
              f"–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {row['total_interactions']}")
    
    # 5. –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    print("\n‚è∞ –í–†–ï–ú–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
    print("-" * 30)
    
    time_stats = await db_repo.execute_query("""
        SELECT 
            DATE(processed_at) as date,
            COUNT(*) as events_count,
            COUNT(DISTINCT agent_id) as active_agents
        FROM capsim.events 
        WHERE processed_at IS NOT NULL
        GROUP BY DATE(processed_at)
        ORDER BY date DESC
        LIMIT 5
    """)
    
    for row in time_stats:
        print(f"  {row['date']} | {row['events_count']:>4} —Å–æ–±—ã—Ç–∏–π | {row['active_agents']:>3} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    # 6. Realtime —Ä–µ–∂–∏–º
    print("\nüîÑ REALTIME –†–ï–ñ–ò–ú:")
    print("-" * 25)
    
    realtime_events = await db_repo.execute_query("""
        SELECT timestamp, processed_at, event_type
        FROM capsim.events 
        WHERE timestamp > 1000000000  -- Unix timestamp
        ORDER BY processed_at DESC
        LIMIT 3
    """)
    
    if realtime_events:
        print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ realtime —Ä–µ–∂–∏–º–µ:")
        for row in realtime_events:
            sim_time = row['timestamp'] / 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
            print(f"    {row['event_type']} | sim_time: {sim_time:.1f} –º–∏–Ω | "
                  f"real_time: {row['processed_at']}")
    else:
        print("  Realtime —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 7. –¶–µ–ø–æ—á–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ (parent_trend_id)
    print("\nüîó –¶–ï–ü–û–ß–ö–ò –¢–†–ï–ù–î–û–í:")
    print("-" * 25)
    
    trend_chains = await db_repo.execute_query("""
        SELECT 
            t1.topic as parent_topic,
            t2.topic as child_topic,
            COUNT(*) as chain_count
        FROM capsim.trends t1
        JOIN capsim.trends t2 ON t1.trend_id = t2.parent_trend_id
        GROUP BY t1.topic, t2.topic
        ORDER BY chain_count DESC
    """)
    
    if trend_chains:
        print("  –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤:")
        for row in trend_chains:
            print(f"    {row['parent_topic']} ‚Üí {row['child_topic']} ({row['chain_count']} —Ä–∞–∑)")
    else:
        print("  –¶–µ–ø–æ—á–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    await db_repo.close()

if __name__ == "__main__":
    asyncio.run(show_simulation_results()) 