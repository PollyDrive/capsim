services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://capsim_rw:${CAPSIM_RW_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DATABASE_URL_RO=postgresql+asyncpg://capsim_ro:${CAPSIM_RO_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CAPSIM_RW_PASSWORD=${CAPSIM_RW_PASSWORD}
      - CAPSIM_RO_PASSWORD=${CAPSIM_RO_PASSWORD}
      - DOCKER_ENV=true
      - DECIDE_SCORE_THRESHOLD=${DECIDE_SCORE_THRESHOLD}
      - TREND_ARCHIVE_THRESHOLD_DAYS=${TREND_ARCHIVE_THRESHOLD_DAYS}
      - BASE_RATE=${BASE_RATE}
      - BATCH_SIZE=${BATCH_SIZE}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENABLE_JSON_LOGS=${ENABLE_JSON_LOGS}
    labels:
      logging: "promtail"
      service.name: "capsim-app"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CAPSIM_RW_PASSWORD=${CAPSIM_RW_PASSWORD}
      - CAPSIM_RO_PASSWORD=${CAPSIM_RO_PASSWORD}
    labels:
      logging: "promtail"
      service.name: "capsim-postgres"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./monitoring/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - default

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - promtail_data:/tmp
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - default

  grafana:
    image: grafana/grafana:9.2.0
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      # Включаем unified alerting
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      # Настройки для email уведомлений
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=${GRAFANA_SMTP_USER:-your-email@gmail.com}
      - GF_SMTP_PASSWORD=${GRAFANA_SMTP_PASSWORD:-your-app-password}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_SMTP_FROM:-your-email@gmail.com}
      - GF_SMTP_FROM_NAME=CAPSIM Performance Monitoring
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - loki

  # Сервер для браузерных push уведомлений
  browser-push-server:
    build:
      context: .
      dockerfile: Dockerfile.browser-push
    ports:
      - "8001:8001"
    volumes:
      - ./scripts:/app/scripts
      - ./logs:/app/logs
    environment:
      - PORT=8001
      - DEBUG=false
    depends_on:
      - grafana

  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - default

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - default

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - postgres
    networks:
      - default

volumes:
  postgres_data:
  grafana_data:
  loki_data:
  promtail_data:
  prometheus_data:
