#!/usr/bin/env python3
"""
CLI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–π CAPSIM.
"""

import asyncio
import sys
import json
import logging
from typing import Optional
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def status_simulation_cli(database_url: Optional[str] = None) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏–º—É–ª—è—Ü–∏–π.
    
    Args:
        database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    
    print("üîç CAPSIM - –°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from ..db.repositories import DatabaseRepository
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("  pip install sqlalchemy asyncpg psycopg2-binary")
        return
    
    # URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not database_url:
        import os
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise ValueError("DATABASE_URL environment variable is required")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        db_repo = DatabaseRepository(database_url)
        
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        active_simulations = await db_repo.get_active_simulations()
        
        if not active_simulations:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π")
            print("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é: python -m capsim run")
        else:
            print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π: {len(active_simulations)}")
            print()
            
            for sim in active_simulations:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                if sim.start_time:
                    runtime = datetime.utcnow() - sim.start_time
                    runtime_str = str(runtime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
                else:
                    runtime_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                print(f"üìä ID: {sim.run_id}")
                print(f"   üìà –°—Ç–∞—Ç—É—Å: {sim.status}")
                print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {sim.num_agents}")
                print(f"   üìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sim.duration_days} –¥–Ω–µ–π")
                print(f"   ‚è∞ –ó–∞–ø—É—â–µ–Ω–∞: {sim.start_time}")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime_str}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if sim.configuration:
                    config = sim.configuration
                    if 'sim_speed_factor' in config:
                        print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏: {config['sim_speed_factor']}x")
                    if 'batch_size' in config:
                        print(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {config['batch_size']}")
                
                print()
                
                # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                print(f"üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
                print(f"   üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: python -m capsim stop {sim.run_id}")
                print(f"   üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: python -m capsim stop {sim.run_id} --force")
                print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        from ..db.models import SimulationRun, Person as DBPerson, Event, Trend
        from sqlalchemy import select, func
        
        async with db_repo.ReadOnlySession() as session:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_sims_result = await session.execute(select(func.count(SimulationRun.run_id)))
            total_sims = total_sims_result.scalar()
            
            total_persons_result = await session.execute(select(func.count(DBPerson.id)))
            total_persons = total_persons_result.scalar()
            
            total_events_result = await session.execute(select(func.count(Event.event_id)))
            total_events = total_events_result.scalar()
            
            total_trends_result = await session.execute(select(func.count(Trend.trend_id)))
            total_trends = total_trends_result.scalar()
            
        print(f"   üéØ –í—Å–µ–≥–æ —Å–∏–º—É–ª—è—Ü–∏–π: {total_sims}")
        print(f"   üë• –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {total_persons}")
        print(f"   üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}")
        print(f"   üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–¥–æ–≤: {total_trends}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db_repo.close()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            await db_repo.close()
        except:
            pass
        
        raise


def main():
    """Main CLI entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CAPSIM Status - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–π")
    parser.add_argument("--db-url", type=str, help="URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    try:
        asyncio.run(status_simulation_cli(
            database_url=args.db_url
        ))
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 