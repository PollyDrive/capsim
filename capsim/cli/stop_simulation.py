#!/usr/bin/env python3
"""
CLI –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–π CAPSIM.
"""

import asyncio
import sys
import json
import logging
from typing import Optional
from datetime import datetime
from uuid import UUID

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def stop_simulation_cli(
    simulation_id: Optional[str] = None,
    force: bool = False,
    database_url: Optional[str] = None
) -> None:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é.
    
    Args:
        simulation_id: ID —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é)
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    
    print("üõë CAPSIM - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from ..db.repositories import DatabaseRepository
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("  pip install sqlalchemy asyncpg psycopg2-binary")
        return
    
    # URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not database_url:
        import os
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise ValueError("DATABASE_URL environment variable is required")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        db_repo = DatabaseRepository(database_url)
        
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
        print(f"‚öôÔ∏è  –†–µ–∂–∏–º: {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π' if force else 'graceful'}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        active_simulations = await db_repo.get_active_simulations()
        
        if not active_simulations:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("üí° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: python -m capsim status")
            await db_repo.close()
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        target_simulation = None
        
        if simulation_id:
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
            try:
                target_id = UUID(simulation_id)
                for sim in active_simulations:
                    if sim.run_id == target_id:
                        target_simulation = sim
                        break
                
                if not target_simulation:
                    print(f"‚ùå –°–∏–º—É–ª—è—Ü–∏—è {simulation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                    print("\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏:")
                    for sim in active_simulations:
                        print(f"   - {sim.run_id} (—Å—Ç–∞—Ç—É—Å: {sim.status})")
                    await db_repo.close()
                    return
                    
            except ValueError:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–∏–º—É–ª—è—Ü–∏–∏: {simulation_id}")
                print("üí° ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2ed1315b-17a1-4b05-bdbc-11187f8270d5")
                await db_repo.close()
                return
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
            target_simulation = active_simulations[0]
            print(f"üéØ –ë—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è: {target_simulation.run_id}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º—É–ª—è—Ü–∏–∏
        print(f"üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"   üîÑ ID: {target_simulation.run_id}")
        print(f"   üìà –°—Ç–∞—Ç—É—Å: {target_simulation.status}")
        print(f"   üë• –ê–≥–µ–Ω—Ç–æ–≤: {target_simulation.num_agents}")
        print(f"   ‚è∞ –ó–∞–ø—É—â–µ–Ω–∞: {target_simulation.start_time}")
        
        if target_simulation.start_time:
            runtime = datetime.utcnow() - target_simulation.start_time
            runtime_str = str(runtime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime_str}")
        
        print()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if force:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞!")
            print("   - –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã")
            print("   - –°–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –±—É–¥—É—Ç –æ—Ç–±—Ä–æ—à–µ–Ω—ã")
            print("   - –ê–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è –≤ –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            print()
            
            confirm = input("‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É? (yes/no): ")
            if confirm.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                await db_repo.close()
                return
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        if force:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            await db_repo.force_complete_simulation(target_simulation.run_id)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
            cleared_events = await db_repo.clear_future_events(
                target_simulation.run_id, 
                force=True
            )
            
            print(f"üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(f"   üóëÔ∏è  –û—á–∏—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {cleared_events}")
            
        else:
            # Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            await db_repo.update_simulation_status(
                target_simulation.run_id,
                "STOPPING"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            cleared_events = await db_repo.clear_future_events(
                target_simulation.run_id,
                current_time=None,  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                force=False
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            await db_repo.update_simulation_status(
                target_simulation.run_id,
                "COMPLETED",
                datetime.utcnow()
            )
            
            print(f"‚úÖ Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(f"   üóëÔ∏è  –û—á–∏—â–µ–Ω–æ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {cleared_events}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É Prometheus
        try:
            from ..common.metrics import SIMULATION_COUNT
            remaining_active = await db_repo.get_active_simulations()
            SIMULATION_COUNT.set(len(remaining_active))
        except ImportError:
            pass  # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        
        print()
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üí° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: python -m capsim status")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é: python -m capsim run --agents 100")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db_repo.close()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            await db_repo.close()
        except:
            pass
        
        raise


def main():
    """Main CLI entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CAPSIM Stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–π")
    parser.add_argument('simulation_id', nargs='?', help='ID —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument("--force", action="store_true", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    parser.add_argument("--db-url", type=str, help="URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    try:
        asyncio.run(stop_simulation_cli(
            simulation_id=args.simulation_id,
            force=args.force,
            database_url=args.db_url
        ))
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()