#!/usr/bin/env python3
"""
CLI –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM.
"""

import asyncio
import os
import sys
import json
import logging
import signal
from typing import Optional
from uuid import UUID

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


class SimulationStopperError(Exception):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏."""
    pass


async def stop_simulation_cli(
    simulation_id: Optional[str] = None,
    force: bool = False,
    database_url: Optional[str] = None,
    timeout_seconds: int = 30
) -> None:
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ CLI.
    
    Args:
        simulation_id: ID —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ graceful shutdown
        database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –¥–ª—è graceful shutdown
    """
    
    print("üõë CAPSIM Simulation Stopper")
    print(f"‚è±Ô∏è  Timeout: {timeout_seconds} seconds")
    print(f"üîß Force mode: {'ON' if force else 'OFF'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from ..engine.simulation_engine import SimulationEngine
        from ..db.repositories import DatabaseRepository
        from ..core.settings import settings
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("  pip install sqlalchemy asyncpg psycopg2-binary")
        return
    
    # URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not database_url:
        database_url = os.getenv("DATABASE_URL", "postgresql+asyncpg://user:pass@localhost/capsim")
    
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        db_repo = DatabaseRepository(database_url)
        
        # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π
        if simulation_id:
            target_simulation_id = UUID(simulation_id)
            print(f"\nüéØ –¶–µ–ª–µ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è: {target_simulation_id}")
        else:
            print("\nüîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π...")
            active_simulations = await db_repo.get_active_simulations()
            
            if not active_simulations:
                print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π: {len(active_simulations)}")
            for sim in active_simulations:
                print(f"  ‚Ä¢ {sim.run_id} (—Å—Ç–∞—Ç—É—Å: {sim.status}, –∞–≥–µ–Ω—Ç–æ–≤: {sim.num_agents})")
            
            if len(active_simulations) == 1:
                target_simulation_id = active_simulations[0].run_id
                print(f"\nüéØ –ê–≤—Ç–æ–≤—ã–±–æ—Ä –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏: {target_simulation_id}")
            else:
                print("\n‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π. –£–∫–∞–∂–∏—Ç–µ simulation_id")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º—É–ª—è—Ü–∏–∏
        simulation_run = await db_repo.get_simulation_run(target_simulation_id)
        if not simulation_run:
            print(f"‚ùå –°–∏–º—É–ª—è—Ü–∏—è {target_simulation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"  ID: {simulation_run.run_id}")
        print(f"  –°—Ç–∞—Ç—É—Å: {simulation_run.status}")
        print(f"  –ê–≥–µ–Ω—Ç–æ–≤: {simulation_run.num_agents}")
        print(f"  –î–Ω–µ–π: {simulation_run.duration_days}")
        print(f"  –°–æ–∑–¥–∞–Ω–∞: {simulation_run.created_at}")
        
        if simulation_run.status not in ["RUNNING", "ACTIVE"]:
            print(f"‚ö†Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {simulation_run.status})")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        if force:
            await _force_stop_simulation(db_repo, target_simulation_id)
        else:
            await _graceful_stop_simulation(db_repo, target_simulation_id, timeout_seconds)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db_repo.close()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            await db_repo.close()
        except:
            pass
        
        raise


async def _graceful_stop_simulation(
    db_repo: "DatabaseRepository", 
    simulation_id: UUID, 
    timeout_seconds: int
) -> None:
    """
    Graceful –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ batch commit.
    
    Args:
        db_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        simulation_id: ID —Å–∏–º—É–ª—è—Ü–∏–∏
        timeout_seconds: –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    
    print(f"‚ö° –†–µ–∂–∏–º: Graceful stop (timeout: {timeout_seconds}s)")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π engine –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Redis, —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ shared memory
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –ë–î
        await db_repo.update_simulation_status(simulation_id, "STOPPING")
        
        logger.info(json.dumps({
            "event": "simulation_stop_initiated", 
            "simulation_id": str(simulation_id),
            "method": "graceful",
            "timeout_seconds": timeout_seconds,
            "timestamp": asyncio.get_event_loop().time()
        }))
        
        # –°–∏–º—É–ª—è—Ü–∏—è graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = asyncio.get_event_loop().time()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É —Å–∏–º—É–ª—è—Ü–∏–∏
        # –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        print("üìù –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è batch operations...")
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å graceful shutdown
        await asyncio.sleep(min(2.0, timeout_seconds))  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è graceful stop
        
        # –û—á–∏—Å—Ç–∫–∞ –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î (—Å–æ–±—ã—Ç–∏—è —Å timestamp > current_time)
        current_time = asyncio.get_event_loop().time()
        await db_repo.clear_future_events(simulation_id, current_time)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await db_repo.update_simulation_status(simulation_id, "STOPPED", 
                                             end_time=current_time)
        
        stop_duration = asyncio.get_event_loop().time() - start_time
        
        logger.info(json.dumps({
            "event": "simulation_stopped",
            "simulation_id": str(simulation_id),
            "method": "graceful", 
            "stop_duration_seconds": stop_duration,
            "queue_cleared": True,
            "batch_committed": True,
            "timestamp": current_time
        }))
        
        print(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ({stop_duration:.2f}s)")
        print("üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("üßπ –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω–∞")
        
    except asyncio.TimeoutError:
        print(f"‚è∞ Timeout {timeout_seconds}s –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ force mode")
        await _force_stop_simulation(db_repo, simulation_id)
        
    except Exception as e:
        logger.error(json.dumps({
            "event": "graceful_stop_error",
            "simulation_id": str(simulation_id),
            "error": str(e),
            "fallback_to_force": True
        }))
        
        print(f"‚ùå –û—à–∏–±–∫–∞ graceful stop: {e}")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ force mode...")
        await _force_stop_simulation(db_repo, simulation_id)


async def _force_stop_simulation(
    db_repo: "DatabaseRepository",
    simulation_id: UUID
) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ graceful shutdown.
    
    Args:
        db_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        simulation_id: ID —Å–∏–º—É–ª—è—Ü–∏–∏
    """
    
    print(f"‚ö° –†–µ–∂–∏–º: Force stop")
    
    try:
        start_time = asyncio.get_event_loop().time()
        
        logger.info(json.dumps({
            "event": "simulation_force_stop_initiated",
            "simulation_id": str(simulation_id),
            "method": "force",
            "timestamp": start_time
        }))
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await db_repo.update_simulation_status(simulation_id, "FORCE_STOPPED")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π
        await db_repo.clear_future_events(simulation_id, force=True)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö pending –æ–ø–µ—Ä–∞—Ü–∏–π
        await db_repo.force_complete_simulation(simulation_id)
        
        stop_duration = asyncio.get_event_loop().time() - start_time
        
        logger.info(json.dumps({
            "event": "simulation_force_stopped",
            "simulation_id": str(simulation_id),
            "method": "force",
            "stop_duration_seconds": stop_duration,
            "data_loss_possible": True,
            "timestamp": asyncio.get_event_loop().time()
        }))
        
        print(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({stop_duration:.2f}s)")
        print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        logger.error(json.dumps({
            "event": "force_stop_error",
            "simulation_id": str(simulation_id),
            "error": str(e)
        }))
        raise SimulationStopperError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    
    def signal_handler(signum, frame):
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ graceful shutdown
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def main():
    """Main CLI entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CAPSIM Simulation Stopper")
    parser.add_argument("--simulation-id", type=str, 
                        help="ID —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω—É—é)")
    parser.add_argument("--force", action="store_true", 
                        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ graceful shutdown")
    parser.add_argument("--timeout", type=int, default=30,
                        help="–¢–∞–π–º–∞—É—Ç –¥–ª—è graceful shutdown (—Å–µ–∫—É–Ω–¥—ã)")
    parser.add_argument("--db-url", type=str, 
                        help="URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    try:
        asyncio.run(stop_simulation_cli(
            simulation_id=args.simulation_id,
            force=args.force,
            database_url=args.db_url,
            timeout_seconds=args.timeout
        ))
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()