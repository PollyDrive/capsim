#!/usr/bin/env python3
"""
CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM.
"""

import asyncio
import os
import sys
import json
import logging
from typing import Optional
import yaml

# For test mode use in-memory repository
from types import SimpleNamespace

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def load_simulation_config():
    """Loads simulation configuration from config/simulation.yaml."""
    config_path = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'simulation.yaml')
    with open(config_path, 'r') as f:
        return yaml.safe_load(f)

async def run_simulation_cli(
    num_agents: int = 100,
    duration_days: float = 1.0,
    database_url: Optional[str] = None,
    sim_speed_factor: float = 1.0
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ CLI.
    
    Args:
        num_agents: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
        duration_days: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        database_url: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sim_speed_factor: –§–∞–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ (1.0 = —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    """
    
    print("üöÄ –ó–∞–ø—É—Å–∫ CAPSIM Simulation Engine")
    print(f"üìä –ê–≥–µ–Ω—Ç–æ–≤: {num_agents}")
    print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏: {sim_speed_factor}x")
    
    os.environ["SIM_SPEED_FACTOR"] = str(sim_speed_factor)

    try:
        from ..engine.simulation_engine import SimulationEngine
        from ..db.repositories import DatabaseRepository as _RealRepository
        from ..common.settings import settings
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    if not database_url:
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise ValueError("DATABASE_URL environment variable is required")
    
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    
    try:
        if database_url and database_url.startswith("sqlite+aiosqlite"): 
            from reports.demo_simulation import _InMemoryRepo as DatabaseRepository
        else:
            DatabaseRepository = _RealRepository
        
        if DatabaseRepository is _RealRepository:
            db_repo = DatabaseRepository(database_url)
        else:
            db_repo = DatabaseRepository()
        
        simulation_config = load_simulation_config()
        engine = SimulationEngine(db_repo)
        
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏...")
        await engine.initialize(num_agents=num_agents, duration_days=duration_days, config=simulation_config)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(engine.agents)}")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(engine.event_queue)}")
        print(f"‚úÖ Affinity map –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(engine.affinity_map)} —Ç–µ–º")
        
        print(f"\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞ {duration_days} –¥–Ω–µ–π...")
        
        await engine.run_simulation()
        
        final_stats = engine.get_simulation_stats()
        
        from ..common.time_utils import convert_sim_time_to_human, format_simulation_time_detailed
        
        print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {final_stats['current_time']:.1f} –º–∏–Ω—É—Ç ({format_simulation_time_detailed(final_stats['current_time'])})")
        print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {final_stats['active_agents']}/{final_stats['total_agents']}")
        print(f"  –°–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {final_stats['active_trends']}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π/–∞–≥–µ–Ω—Ç/—á–∞—Å: {final_stats.get('avg_actions_per_agent_per_hour', 0):.2f}")
        print(f"  –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {final_stats.get('total_purchases', 0)}")
        print(f"  –í—Å–µ–≥–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–π: {final_stats.get('total_selfdev', 0)}")
        print(f"  ID —Å–∏–º—É–ª—è—Ü–∏–∏: {final_stats['simulation_id']}")
        
        print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        await db_repo.close()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        try:
            await engine.shutdown()
            await db_repo.close()
        except:
            pass
        
        raise

def main():
    """Main CLI entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="CAPSIM Simulation Engine")
    parser.add_argument("--agents", type=int, default=100, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤")
    parser.add_argument("--days", type=float, default=1, help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö")
    parser.add_argument("--db-url", type=str, help="URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--speed", type=float, default=240.0, help="–§–∞–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ (240x = –±—ã—Å—Ç—Ä–æ, 1x = —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)")
    parser.add_argument("--240x", action="store_const", const=240.0, dest="speed", help="–ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç --speed 240)")
    parser.add_argument("--test", action="store_true", help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ—Ä–æ—Ç–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è)")
    
    args = parser.parse_args()
    
    if args.test:
        print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–∏–Ω–∏-—Å–∏–º—É–ª—è—Ü–∏—è")
        args.agents = 10
        args.days = 60/1440
    
    try:
        asyncio.run(run_simulation_cli(
            num_agents=args.agents,
            duration_days=args.days,
            database_url=args.db_url,
            sim_speed_factor=args.speed
        ))
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()