#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ CAPSIM.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: Post, Purchase, SelfDev.
"""

import asyncio
import json
import logging
from datetime import datetime
from uuid import uuid4

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_simulation_events():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏–º—É–ª—è—Ü–∏–∏."""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        from capsim.engine.simulation_engine import SimulationEngine
        from capsim.db.repositories import DatabaseRepository
        from capsim.common.settings import settings
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ë–î
        db_repo = DatabaseRepository(settings.DATABASE_URL)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        engine = SimulationEngine(db_repo)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await engine.initialize(num_agents=50, duration_days=0.1)  # 50 –∞–≥–µ–Ω—Ç–æ–≤, 2.4 —á–∞—Å–∞
        
        logger.info("=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –°–û–ë–´–¢–ò–ô ===")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await engine.run_simulation()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏
        stats = engine.get_simulation_stats()
        
        logger.info("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–´–¢–ò–ô ===")
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total_events', 0)}")
        logger.info(f"–°–æ–±—ã—Ç–∏–π –∞–≥–µ–Ω—Ç–æ–≤: {stats.get('agent_events', 0)}")
        logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {stats.get('system_events', 0)}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {stats.get('trends_created', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        events_by_type = {}
        for event in engine._aggregated_events:
            event_type = event.get('event_type', 'Unknown')
            events_by_type[event_type] = events_by_type.get(event_type, 0) + 1
        
        logger.info("=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –ü–û –¢–ò–ü–ê–ú ===")
        for event_type, count in events_by_type.items():
            logger.info(f"{event_type}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        required_events = ['PublishPostAction', 'PurchaseAction', 'SelfDevAction']
        missing_events = []
        
        for event_type in required_events:
            if event_type not in events_by_type or events_by_type[event_type] == 0:
                missing_events.append(event_type)
        
        if missing_events:
            logger.error(f"–û–¢–°–£–¢–°–¢–í–£–Æ–¢ –°–û–ë–´–¢–ò–Ø: {missing_events}")
            return False
        else:
            logger.info("‚úÖ –í–°–ï –¢–ò–ü–´ –°–û–ë–´–¢–ò–ô –°–û–ó–î–ê–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–¥—ã —Å–æ–∑–¥–∞—é—Ç—Å—è
        if stats.get('trends_created', 0) > 0:
            logger.info("‚úÖ –¢–†–ï–ù–î–´ –°–û–ó–î–ê–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û")
        else:
            logger.warning("‚ö†Ô∏è –¢–†–ï–ù–î–´ –ù–ï –°–û–ó–î–ê–Æ–¢–°–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        active_agents = sum(1 for agent in engine.agents if agent.energy_level > 0)
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {active_agents}/{len(engine.agents)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π
        logger.info("=== –ü–†–ò–ú–ï–†–´ –°–û–ë–´–¢–ò–ô ===")
        for i, event in enumerate(engine._aggregated_events[:5]):
            logger.info(f"–°–æ–±—ã—Ç–∏–µ {i+1}: {event.get('event_type')} - –∞–≥–µ–Ω—Ç {event.get('agent_id', 'N/A')}")
        
        logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        return True
        
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_simulation_events())
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π!")
        exit(1) 