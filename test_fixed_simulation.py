#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ CAPSIM.
–ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ 100 –∞–≥–µ–Ω—Ç–æ–≤.
"""

import asyncio
import logging
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from capsim.engine.simulation_engine import SimulationEngine
from capsim.db.repositories import DatabaseRepository
from capsim.common.logging_config import setup_logging
from capsim.common.db_config import ASYNC_DSN


async def run_test_simulation():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ 100 –∞–≥–µ–Ω—Ç–æ–≤."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")
    logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 100 –∞–≥–µ–Ω—Ç–æ–≤, 0.5 –¥–Ω—è (12 —á–∞—Å–æ–≤), —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_repo = DatabaseRepository(ASYNC_DSN)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    simulation_engine = SimulationEngine(db_repo)
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start_time = time.time()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Å 100 –∞–≥–µ–Ω—Ç–∞–º–∏
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏...")
        await simulation_engine.initialize(num_agents=100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"   - –ê–≥–µ–Ω—Ç–æ–≤: {len(simulation_engine.agents)}")
        logger.info(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {len(simulation_engine.active_trends)}")
        logger.info(f"   - –°–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(simulation_engine.event_queue)}")
        logger.info(f"   - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {simulation_engine.end_time}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞ 0.5 –¥–Ω—è (12 —á–∞—Å–æ–≤)
        duration_days = 0.5
        logger.info(f"‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞ {duration_days} –¥–Ω—è...")
        
        await simulation_engine.run_simulation(duration_days=duration_days)
        
        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time = time.time()
        execution_time = end_time - start_time
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = simulation_engine.get_simulation_stats()
        
        logger.info("üéâ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   - –°–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {simulation_engine.current_time:.2f} –º–∏–Ω—É—Ç")
        logger.info(f"   - –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {simulation_engine.end_time:.2f} –º–∏–Ω—É—Ç")
        logger.info(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {stats['active_agents']}")
        logger.info(f"   - –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats['total_agents']}")
        logger.info(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {stats['active_trends']}")
        logger.info(f"   - –°–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {stats['queue_size']}")
        logger.info(f"   - –û–∂–∏–¥–∞—é—â–∏—Ö batch: {stats['pending_batches']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if simulation_engine.current_time <= simulation_engine.end_time:
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        else:
            logger.warning("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        events_past_end = 0
        for priority_event in simulation_engine.event_queue:
            if priority_event.timestamp >= simulation_engine.end_time:
                events_past_end += 1
                
        if events_past_end == 0:
            logger.info("‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–º—É–ª—è—Ü–∏–∏")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {events_past_end} —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if simulation_engine._running:
            logger.warning("‚ö†Ô∏è –§–ª–∞–≥ _running –≤—Å–µ –µ—â–µ True!")
        else:
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        logger.error(f"   - –°–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {simulation_engine.current_time}")
        logger.error(f"   - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {simulation_engine.end_time}")
        logger.error(f"   - –°–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(simulation_engine.event_queue)}")
        return False
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        await simulation_engine.stop_simulation("graceful")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await db_repo.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("DATABASE_URL"):
        logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False
    
    logger.info("=" * 60)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–°–ö–û–ù–ï–ß–ù–´–• –¶–ò–ö–õ–û–í CAPSIM")
    logger.info("=" * 60)
    
    success = await run_test_simulation()
    
    if success:
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        logger.error("‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏")
    
    return success


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 